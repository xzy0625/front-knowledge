import{_ as o,c as a,o as l,at as t}from"./chunks/framework.BvgWjPB6.js";const h=JSON.parse('{"title":"babel插件","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/project/babel_plugin.md","filePath":"blogs/project/babel_plugin.md","lastUpdated":1738931418000}'),r={name:"blogs/project/babel_plugin.md"};function c(d,e,b,i,s,n){return l(),a("div",null,e[0]||(e[0]=[t('<h1 id="babel插件" tabindex="-1">babel插件 <a class="header-anchor" href="#babel插件" aria-label="Permalink to &quot;babel插件&quot;">​</a></h1><p>babel官网：<a href="https://babeljs.io/docs/" target="_blank" rel="noreferrer">https://babeljs.io/docs/</a></p><h2 id="babel是什么" tabindex="-1">babel是什么？ <a class="header-anchor" href="#babel是什么" aria-label="Permalink to &quot;babel是什么？&quot;">​</a></h2><p>Babel 是一个工具链，主要用于将 ECMAScript 2015+ 代码转换为当前和旧版浏览器或环境中的向后兼容版本的 JavaScript。它可以做以下事情：</p><ul><li>变换语法</li><li>目标环境中缺少的 Polyfill 功能（通过第三方 Polyfill，例如<a href="https://github.com/zloirock/core-js" target="_blank" rel="noreferrer">core-js</a>）</li><li>源代码转换 (codemods)</li><li>...</li></ul><p>值得一提的是，<strong>babel只是提供了一个“平台”</strong>，让更多有能力的plugins入驻平台，是这些plugins提供了各种各样的转换能力。</p><h1 id="babel的编译流程" tabindex="-1">babel的编译流程 <a class="header-anchor" href="#babel的编译流程" aria-label="Permalink to &quot;babel的编译流程&quot;">​</a></h1><p>主要分为三步，流程主要为：</p><p><strong>parsing（解析）、transforming（转化）、generating（生成）</strong></p><ol><li>parsing: <code>@babel/parser</code> 负责将es6代码进行语法分析和词法分析后转换成抽象语法树AST</li><li>transforming: plugin插件使用 <code>@babel/traverse</code> 来遍历 AST 并进行节点的操作，用它提供的 API 来编写对 AST 的遍历和修改逻辑，由此来将一种AST转换为另一种AST</li><li>generating：<code>@babel/generator</code>负责通过AST树生成ES5代码</li></ol><p>其中第二步的转化是重中之重，babel的插件机制也是在这一步发挥作用的，plugins在这里进行操作，转化成新的AST，再交给第三步的<code>@babel/generator</code>。 所以如果没有这些plugins进驻平台，那么babel这个“平台”是不具备任何能力的。</p><p>而这整个过程，由<code>@babel/core</code> 负责编译过程的控制和管理。它会调用其他模块来解析、转换和生成代码。</p><h2 id="常见plugin和preset" tabindex="-1">常见<code>plugin</code>和<code>Preset</code> <a class="header-anchor" href="#常见plugin和preset" aria-label="Permalink to &quot;常见`plugin`和`Preset`&quot;">​</a></h2><p>首先我们来说说<code>Plugin</code>和<code>Preset</code>的区别和联系。</p><p><strong>所谓<code>Preset</code>就是一些<code>Plugin</code>组成的合集</strong>,你可以将<code>Preset</code>理解称为就是一些的<code>Plugin</code>整合称为的一个包。</p><h3 id="常见preset" tabindex="-1">常见<code>Preset</code> <a class="header-anchor" href="#常见preset" aria-label="Permalink to &quot;常见`Preset`&quot;">​</a></h3><p>文章中列举了三个最常用的<code>Preset</code>，更多的<code>Prest</code><a href="https://babeljs.io/docs/en/babel-preset-env" target="_blank" rel="noreferrer">你可以在这里查阅</a>。</p><h4 id="babel-preset-env" tabindex="-1"><code>babel-preset-env</code> <a class="header-anchor" href="#babel-preset-env" aria-label="Permalink to &quot;`babel-preset-env`&quot;">​</a></h4><p><code>@babel/preset-env</code>是一个智能预设，它可以将我们的高版本<code>JavaScript</code>代码进行转译根据内置的规则转译成为低版本的<code>javascript</code>代码。</p><p><code>preset-env</code>内部集成了绝大多数<code>plugin</code>（<code>State &gt; 3</code>）的转译插件，它会根据对应的参数进行代码转译。</p><p>具体的参数配置你可以在<a href="https://babeljs.io/docs/en/babel-preset-env#options" target="_blank" rel="noreferrer">这里看到</a>。</p><blockquote><p><code>@babel/preset-env</code>不会包含任何低于 Stage 3 的 JavaScript 语法提案。如果需要兼容低于<code>Stage 3</code>阶段的语法则需要额外引入对应的<code>Plugin</code>进行兼容。</p></blockquote><blockquote><p>需要额外注意的是<code>babel-preset-env</code>仅仅针对语法阶段的转译，比如转译箭头函数，<code>const/let</code>语法。针对一些<code>Api</code>或者<code>Es 6</code>内置模块的<code>polyfill</code>，<code>preset-env</code>是无法进行转译的。这块内容我们会在之后的<code>polyfill</code>中为大家进行详细讲解。</p></blockquote><h4 id="babel-preset-react" tabindex="-1"><code>babel-preset-react</code> <a class="header-anchor" href="#babel-preset-react" aria-label="Permalink to &quot;`babel-preset-react`&quot;">​</a></h4><p>通常我们在使用<code>React</code>中的<code>jsx</code>时，相信大家都明白实质上<code>jsx</code>最终会被编译称为<code>jsx()</code>方法。</p><p><code>babel-preset-react</code>这个预设起到的就是将<code>jsx</code>进行转译的作用。</p><h4 id="babel-preset-typescript" tabindex="-1"><code>babel-preset-typescript</code> <a class="header-anchor" href="#babel-preset-typescript" aria-label="Permalink to &quot;`babel-preset-typescript`&quot;">​</a></h4><p>对于<code>TypeScript</code>代码，我们有两种方式去编译<code>TypeScript</code>代码成为<code>JavaScript</code>代码。</p><ol><li>使用<code>tsc</code>命令，结合<code>cli</code>命令行参数方式或者<code>tsconfig</code>配置文件进行编译<code>ts</code>代码。</li><li>使用<code>babel</code>，通过<code>babel-preset-typescript</code>代码进行编译<code>ts</code>代码。</li></ol><h3 id="常见plugin" tabindex="-1">常见Plugin <a class="header-anchor" href="#常见plugin" aria-label="Permalink to &quot;常见Plugin&quot;">​</a></h3><p><code>Babel</code>官网列举出了一份非常详尽的<a href="https://babeljs.io/docs/plugins-list" target="_blank" rel="noreferrer">Plugin List</a>。</p><p>关于常见的<code>Plugin</code>其实大多数都集成在了<code>babel-preset-env</code>中，当你发现你的项目中并不能支持最新的<code>js</code>语法时，此时我们可以查阅对应的<code>Babel Plugin List</code>找到对应的语法插件添加进入<code>babel</code>配置。</p><blockquote><p>同时还有一些不常用的<code>packages</code>，比如<code>@babel/register</code>：它会改写<code>require</code>命令，为它加上一个钩子。此后，每当使用<code>require</code>加载<code>.js</code>、<code>.jsx</code>、<code>.es</code>和<code>.es6</code>后缀名的文件，就会先用Babel进行转码。</p></blockquote><blockquote><p>这些包日常中不是特别常用，如果有同学有相关编译相关需求完全可以去<code>babel</code>官网查阅。如果官网不存在现成的<code>plugin/package</code>，别担心！我们同时也会在之后手把手教大家<code>babel</code>插件的开发。</p></blockquote><p>其中最常见的<code>@babel/plugin-transform-runtime</code>我们会在下面的<code>Polyfill</code>进行详细的讲解。</p><h2 id="实现插件所需要的知识" tabindex="-1">实现插件所需要的知识 <a class="header-anchor" href="#实现插件所需要的知识" aria-label="Permalink to &quot;实现插件所需要的知识&quot;">​</a></h2><ul><li>AST <ol><li><a href="https://link.juejin.cn/?target=http%3A%2F%2Fwww.goyth.com%2F2018%2F12%2F23%2FAST%2F%23%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BA%86%E8%A7%A3AST" target="_blank" rel="noreferrer">AST基本讲解及参数</a></li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fastexplorer.net%2F" target="_blank" rel="noreferrer">AST的在线编译工具</a></li></ol></li><li>编译原理知识以及babel的编译过程 <ul><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fwww.icourse163.org%2Fcourse%2FHIT-1002123007%3Ftid%3D1002231003" target="_blank" rel="noreferrer">编译原理</a></li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fjamiebuilds%2Fbabel-handbook%2Fblob%2Fmaster%2Ftranslations%2Fzh-Hans%2Fplugin-handbook.md" target="_blank" rel="noreferrer">babel及AST文档</a></li></ul></li><li>英文阅读能力<a href="https://link.juejin.cn/?target=https%3A%2F%2Fwww.babeljs.cn%2Fdocs%2Fbabel-types" target="_blank" rel="noreferrer">@babel/types</a>。开发的过程中需要用到babel的类型，需要了解它的类型接使用方法</li></ul><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h2>',38)]))}const u=o(r,[["render",c]]);export{h as __pageData,u as default};

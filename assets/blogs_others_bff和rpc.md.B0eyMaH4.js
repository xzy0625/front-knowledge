import{_ as a,c as i,o as e,at as l}from"./chunks/framework.BvgWjPB6.js";const n="/front-knowledge/assets/640-20250116192827253.CseDZUjY.png",t="/front-knowledge/assets/640-20250116192827270.CHIYGZPt.png",p="/front-knowledge/assets/640-20250116192827537.Xfbj6_As.png",r="/front-knowledge/assets/640.toEfs-t5.png",f=JSON.parse('{"title":"bff和rpc","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/others/bff和rpc.md","filePath":"blogs/others/bff和rpc.md","lastUpdated":1738931418000}'),h={name:"blogs/others/bff和rpc.md"};function o(k,s,d,c,g,F){return e(),i("div",null,s[0]||(s[0]=[l(`<h1 id="bff和rpc" tabindex="-1">bff和rpc <a class="header-anchor" href="#bff和rpc" aria-label="Permalink to &quot;bff和rpc&quot;">​</a></h1><h2 id="rpc" tabindex="-1">rpc <a class="header-anchor" href="#rpc" aria-label="Permalink to &quot;rpc&quot;">​</a></h2><h3 id="rpc是什么" tabindex="-1">RPC是什么 <a class="header-anchor" href="#rpc是什么" aria-label="Permalink to &quot;RPC是什么&quot;">​</a></h3><p>RPC（Remote Procedure Call，远程过程调用）是一种计算机通信协议，它允许一个程序调用另一个程序所在的远程计算机上的子程序（或函数）而不需要自己的代码去处理远程调用的细节。</p><h3 id="rpc的应用" tabindex="-1">RPC的应用 <a class="header-anchor" href="#rpc的应用" aria-label="Permalink to &quot;RPC的应用&quot;">​</a></h3><p>RPC技术应用广泛，特别是在分布式系统中。比如，在Web开发中，有时需要从后端服务器请求数据，此时就可以使用RPC进行通信。RPC还可以用于跨语言调用，例如Java程序调用C++程序，也可以用于跨平台通信，例如Windows系统与Linux系统之间的通信。</p><h3 id="rpc的技术要点" tabindex="-1">RPC的技术要点 <a class="header-anchor" href="#rpc的技术要点" aria-label="Permalink to &quot;RPC的技术要点&quot;">​</a></h3><p>在RPC的实现中，有多种技术可以选择，如：</p><ol><li>RPC框架：实现RPC的一种基础设施，包括协议解析，网络通信，序列化和反序列化，负载均衡等功能。</li><li>序列化和反序列化：将数据结构或对象转换为可以在网络上传输的格式和从网络接收的格式。</li><li>协议：定义消息格式和通信规则。常见的RPC协议包括HTTP，TCP，UDP等。</li><li>负载均衡：在多个服务提供者之间进行负载均衡，减少单个服务提供者的负荷。</li></ol><h3 id="rpc的实现案例" tabindex="-1">RPC的实现案例 <a class="header-anchor" href="#rpc的实现案例" aria-label="Permalink to &quot;RPC的实现案例&quot;">​</a></h3><p>除了上面提到的技术，还有一些其他的RPC相关技术，如：</p><ol><li>RESTful API：RESTful是一种设计风格，也可以用于分布式系统中的通信。它包括一组协议和约束条件，可用于提高系统的可伸缩性，可移植性和可靠性。</li><li>gRPC：由Google开发的，基于HTTP/2协议的RPC框架，支持多种编程语言和平台。</li><li>Thrift：由Facebook开发的，支持多种编程语言和平台的RPC框架，包括Java，Python，C#和Ruby等。</li><li>Dubbo：由阿里巴巴开发的，基于Java语言的RPC框架，支持服务治理和容错机制。</li></ol><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>Protocol Buffers（Protobuf）的IDL（Interface Description Language，接口描述语言）是一种用于定义数据结构和服务接口的语言。它允许开发者以一种语言无关和平台无关的方式描述数据结构和服务，从而实现跨语言和跨平台的通信</p><p>在Protobuf中，IDL用于定义消息类型和服务接口。消息类型描述了数据的结构，包括字段名称、类型和标识符。服务接口则定义了可以远程调用的方法，包括请求和响应的消息类型</p><p>例如，以下是一个简单的<code>.proto</code>文件示例，定义了一个名为<code>Person</code>的消息类型和一个名为<code>Greeter</code>的服务接口：</p><div class="language-proto vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">proto</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">syntax</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;proto3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">message</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> email </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">service</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    rpc</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HelloRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">returns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HelloReply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">message</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">message</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloReply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这个示例中，<code>Person</code>消息类型包含三个字段：<code>name</code>、<code>id</code>和<code>email</code>。<code>Greeter</code>服务接口定义了一个<code>SayHello</code>方法，该方法接收一个<code>HelloRequest</code>消息并返回一个<code>HelloReply</code>消息</p><p>通过使用IDL，开发者可以定义清晰、一致的数据结构和服务接口，从而简化分布式系统中的通信和数据交换。</p><h3 id="名字服务" tabindex="-1">名字服务 <a class="header-anchor" href="#名字服务" aria-label="Permalink to &quot;名字服务&quot;">​</a></h3><h3 id="名字服务-name-service" tabindex="-1">名字服务（Name Service） <a class="header-anchor" href="#名字服务-name-service" aria-label="Permalink to &quot;名字服务（Name Service）&quot;">​</a></h3><ul><li>定义：名字服务是一种将易于人类记忆的名称（如域名）映射到计算机可识别的地址（如IP地址）的系统</li><li>作用：它允许用户通过名称而不是复杂的IP地址来访问网络资源，简化了网络操作</li></ul><h2 id="bff" tabindex="-1">bff <a class="header-anchor" href="#bff" aria-label="Permalink to &quot;bff&quot;">​</a></h2><p>BFF，即 <code>Backend For Frontend（</code>服务于前端的后端），也就是服务器设计 API 时会考虑前端的使用，并在服务端直接进行业务逻辑的处理，又称为用户体验适配器。BFF 只是一种逻辑分层，而非一种技术，虽然 BFF 是一个新名词，但它的理念由来已久。</p><p><img src="`+n+'" alt="图片"></p><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h2><h2 id="bff优缺点" tabindex="-1"><strong>BFF优缺点</strong> <a class="header-anchor" href="#bff优缺点" aria-label="Permalink to &quot;**BFF优缺点**&quot;">​</a></h2><p>回顾完前端演化史，我们再来分析BFF利弊。</p><p>BFF作为中间层，优点是：</p><ul><li>前后端彻底分离，即便是后期有微服务迁移，也不需改动前端代码</li><li>业务更向前靠拢，琐碎的api由前端开发自己决定，更适配前端框架</li><li>BFF可以自开mock，插件也能生成API文档，相比后端单开这类服务要方便些吧</li><li>留给后端更清晰的服务边界，只需要提供粗粒度的接口即可</li></ul><p>我自己的项目就直接把<strong>BFF+前端</strong>一齐从后端repo里分离出来，独立开发独立部署。尤其是在多应用场景里，BFF共享后端是很优雅的中台设计。</p><p>当然，BFF的缺点也很明显——增加了系统的复杂度，这会导致一系列的连锁反应</p><ul><li><p>中间层转发会增加请求延迟。</p></li><li><p>需要保证端到端测试</p></li><li><p>必须随时准备好后端异常请求</p></li><li><p>BFF分成会增加开发成本</p></li></ul><h2 id="bff-解决了什么问题" tabindex="-1"><strong>BFF 解决了什么问题</strong> <a class="header-anchor" href="#bff-解决了什么问题" aria-label="Permalink to &quot;**BFF 解决了什么问题**&quot;">​</a></h2><p>如下图，在我们的前端页面时常存在，某个页面需要向 <code>backend A</code>、<code>backend B</code> 以及 <code>backend C...... </code>发送请求，不同服务的返回值用于渲染页面中不同的 <code>component</code>，即一个页面存在很多请求的场景。</p><p><img src="'+t+'" alt="图片"></p><p>此时，每次访问该页面都需要发送 3 个请求。同时为了保障 Android，iOS，以及 Web 端的不同需求，需要为不同的平台写不同的 <code>API</code> 接口，而每当值发生一些变化时，需要 Android，iOS，Web 做出修改。与此同时，当我们需要对一个字符串进行处理，如限定 140 个字符的时候，我们需要在每一个客户端（Android，iOS，Web）分别实现一遍，这样的代价显然相当大。</p><p>于是，我们就需要 BFF 作为中间件。在这个中间件上我们将做一些业务逻辑处理：</p><p><img src="'+p+'" alt="图片"></p><p>而当我们有了 BFF 这一层时，我们就不需要考虑系统后端的迁移。后端发生的变化都可以在 BFF 层做一些响应的修改。</p><p>例如，我们加入 BFF 层，原本每次访问发送 3 请求页面，变成一个请求。</p><p><img src="'+r+'" alt="图片"></p><h2 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-label="Permalink to &quot;&quot;">​</a></h2><h2 id="使用-bff-的正确姿势" tabindex="-1"><strong>使用 BFF 的正确姿势</strong> <a class="header-anchor" href="#使用-bff-的正确姿势" aria-label="Permalink to &quot;**使用 BFF 的正确姿势**&quot;">​</a></h2><ul><li>多端应用 我们在设计 API 时会考虑到不同设备的需求，也就是为不同的设备提供不同的 API，虽然它们可能是实现相同的功能，但因为不同设备的特殊性，它们对服务端的 API 访问也各有其特点，需要区别处理。</li><li>服务聚合 随着微服务的兴起，原本在同一个进程内运行的业务流程被拆分到了不同的服务中。这在增加业务灵活性的同时，也让前端的调用变得更复杂。BFF 的出现为前端应用提供了一个对业务服务调用的聚合点，它屏蔽了复杂的服务调用链，让前端可以聚焦在所需要的数据上，而不用关注底层提供这些数据的服务。</li><li>非必要，莫新增 我们在看到 BFF 带来的各种好处的同时，也要注意到它所带来的代码重复和工作量增加方面的问题。如果与已有 BFF 功能类似，且展现数据的要求也相近的话，一定要谨慎对待新增 BFF 的行为。因此，建议<strong>非必要，莫新增</strong>。</li></ul><h2 id="实战中的玩法" tabindex="-1"><strong>实战中的玩法</strong> <a class="header-anchor" href="#实战中的玩法" aria-label="Permalink to &quot;**实战中的玩法**&quot;">​</a></h2><ul><li>访问控制 例如，服务中的权限控制，将所有服务中的权限控制集中在 BFF 层，使下层服务更加纯粹和独立。</li><li>应用缓存 项目中时常存在一些需要缓存的临时数据，此时 BFF 作为业务的汇聚点，距离用户请求最近，遂将该缓存操作放在 BFF 层。</li><li>第三方入口 在业务中需要与第三交互时，将该交互放在 BFF 层，这样可以只暴露必要信息给第三方，从而便于控制第三方的访问。</li></ul><h2 id="node实现rpc" tabindex="-1">node实现rpc <a class="header-anchor" href="#node实现rpc" aria-label="Permalink to &quot;node实现rpc&quot;">​</a></h2><p>通过<code>pb</code>编译成一些<code>client或者sever</code>的桩代码，可以通过函数调用的方式实现<code>rpc</code>调用。</p><p><code>trpc-node</code>提供<code>cli</code>工具，根据 protobuffer IDL 生成 codec (编/解码器) 以及 client/server 所需的样板代码，基于 <a href="https://www.npmjs.com/package/protobufjs" target="_blank" rel="noreferrer">protobufjs</a> 实现。具体流程为：<code>rick -&gt; 编译成npm包 -&gt; 引入npm包 -&gt; 通过函数调用实现rpc调用</code></p>',50)]))}const b=a(h,[["render",o]]);export{f as __pageData,b as default};

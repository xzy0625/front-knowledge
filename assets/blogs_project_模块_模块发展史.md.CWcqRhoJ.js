import{_ as i,c as a,ag as n,o as l}from"./chunks/framework.BcCMgSRd.js";const t="/front-knowledge/assets/dd166068812a63d195dfac7a0adbf4df.Dp8cP5HK.png",h="/front-knowledge/assets/49a8effc0387dc7ed0079ef280c08714.CsKTbOIC.png",p="/front-knowledge/assets/dd446c979e1c3d8a9d611e605e3abb85.BCwMpLb7.png",e="/front-knowledge/assets/51645812949203745fb710389200dce5.JuuYV_vq.png",u=JSON.parse('{"title":"模块发展史","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/project/模块/模块发展史.md","filePath":"blogs/project/模块/模块发展史.md","lastUpdated":1737013267000}'),k={name:"blogs/project/模块/模块发展史.md"};function r(d,s,o,E,g,c){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="模块发展史" tabindex="-1">模块发展史 <a class="header-anchor" href="#模块发展史" aria-label="Permalink to &quot;模块发展史&quot;">​</a></h1><p>在前端开发的历史中，模块化一直是一个核心的问题。随着 JavaScript 应用程序变得越来越复杂，代码的可维护性、复用性和模块化的需求也越来越迫切。</p><p>在模块化的演进过程中，最开始是通过<code>IFFE</code>来实现模块化，例如我们最熟悉的<code>jQuery</code>。后面才涌现了多个模块化标准，例如 <code>CommonJS</code>、<code>AMD</code> 以及现代的 <code>ES6 Module</code>。本篇文章将介绍这些标准的发展历程和各自的特点。</p><h2 id="一、为什么需要模块化" tabindex="-1">一、为什么需要模块化？ <a class="header-anchor" href="#一、为什么需要模块化" aria-label="Permalink to &quot;一、为什么需要模块化？&quot;">​</a></h2><p>在早期<code>JavaScript</code>的开发当中，在没有模块化的情况下。写法是这样的：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./home.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./user.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>这种写法很容易存在全局污染和依赖管理混乱问题。在多人开发前端应用的情况下问题更加明显。</p><p>命名混乱、代码组织性低、可维护性差、可重用性低等问题暴露的更加明显。</p><p>例如：</p><h3 id="_1-1-命名冲突" tabindex="-1">1.1 命名冲突 <a class="header-anchor" href="#_1-1-命名冲突" aria-label="Permalink to &quot;1.1 命名冲突&quot;">​</a></h3><p>在没有模块化的情况下，所有的函数和变量都定义在全局作用域中。这意味着如果不小心命名冲突，不同部分的代码可能会意外地互相影响，导致难以察觉的 <code>bug</code>或不可预见的行为。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 文件 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> calculateTotal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">quantity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> price \\</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> quantity;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 文件 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> calculateTotal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">taxRate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> price \\</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> taxRate);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果这两个文件都在全局作用域中定义，且被同一个 HTML 文件引用，那么 <code>calculateTotal</code> 函数会产生冲突，调用时可能会得到不正确的结果。</p><h3 id="_1-2-全局污染" tabindex="-1">1.2 全局污染 <a class="header-anchor" href="#_1-2-全局污染" aria-label="Permalink to &quot;1.2 全局污染&quot;">​</a></h3><p>在没有模块化的情况下，所有的变量和函数都被添加到全局命名空间中。这可能导致变量名重复、不必要的全局变量增多，从而增加了代码的复杂性和维护难度。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 文件 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Alice&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greetUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello, &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 文件 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Bob&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> displayUsername</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Current user: &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> username);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果这两个文件都在同一个页面中执行，它们共享同一个全局命名空间，可能会造成 <code>username</code> 被覆盖，从而导致 <code>greetUser</code> 和 <code>displayUsername</code> 函数不再使用预期的 <code>username</code> 值。</p><h4 id="难以管理和维护" tabindex="-1">难以管理和维护 <a class="header-anchor" href="#难以管理和维护" aria-label="Permalink to &quot;难以管理和维护&quot;">​</a></h4><p>没有模块化的代码通常难以分离、重用和测试。整体项目结构可能变得混乱，不同功能之间的依赖关系也不明确，增加了代码的复杂性和理解难度，特别是在大型项目中。</p><p><strong>示例：</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 文件 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> calculateTotal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">price</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">quantity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> price \\</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> quantity;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> formatCurrency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">amount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;$&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> amount.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toFixed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 文件 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> calculateTax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">total</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">taxRate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> total \\</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> taxRate;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> formatCurrency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">amount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;¥&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> amount.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toFixed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在没有模块化的情况下，两个文件都在全局作用域中定义 <code>formatCurrency</code> 函数，如果它们都被加载到同一个页面中，会出现函数覆盖和不一致的行为。</p><p>综上，随着前端技术的发展，JavaScript 被用来构建越来越复杂的应用程序。传统的脚本方式逐渐暴露出许多问题：</p><ol><li><strong>命名冲突</strong>：不同脚本文件中的变量容易出现命名冲突，导致难以调试。</li><li><strong>依赖管理复杂</strong>：需要手动维护脚本之间的依赖关系，这种方式非常脆弱且容易出错。</li><li><strong>代码复用性差</strong>：代码没有统一的模块规范，无法实现有效的代码复用。</li></ol><p>为了解决这些问题，模块化的概念逐渐被引入到 JavaScript 生态系统中。使用模块化之后有以下好处：</p><ol><li>避免命名冲突(减少命名空间污染)</li><li>更好的分离, 按需加载</li><li>更高复用性</li><li>高可维护性</li></ol><h2 id="二、早期的模块化标准" tabindex="-1">二、早期的模块化标准 <a class="header-anchor" href="#二、早期的模块化标准" aria-label="Permalink to &quot;二、早期的模块化标准&quot;">​</a></h2><p>在 JavaScript 原生支持模块化之前，社区和开发者们提出了多种模块化规范。最具代表性的两种是 <code>CommonJS</code> 和 <code>AMD</code>。</p><h3 id="_2-1-commonjs-规范" tabindex="-1">2.1 CommonJS 规范 <a class="header-anchor" href="#_2-1-commonjs-规范" aria-label="Permalink to &quot;2.1 CommonJS 规范&quot;">​</a></h3><h3 id="_2-1-1-commonjs-简介" tabindex="-1">2.1.1 CommonJS 简介 <a class="header-anchor" href="#_2-1-1-commonjs-简介" aria-label="Permalink to &quot;2.1.1 CommonJS 简介&quot;">​</a></h3><p><strong>CommonJS 是 Node.js 采用的模块化规范，主要用于服务端的 JavaScript 环境。</strong></p><p>CommonJS 通过 <code>require()</code> 函数同步加载依赖模块，并使用 <code>module.exports</code> 导出模块成员。</p><h3 id="_2-1-2-commonjs-的特性" tabindex="-1">2.1.2 CommonJS 的特性 <a class="header-anchor" href="#_2-1-2-commonjs-的特性" aria-label="Permalink to &quot;2.1.2 CommonJS 的特性&quot;">​</a></h3><ul><li><strong>同步加载</strong>：模块在代码运行时同步加载，适用于服务端，但不适用于浏览器环境，因为浏览器环境中同步加载会阻塞渲染进程。</li><li><strong>缓存机制</strong>：同一个模块在多次加载时会被缓存，除非明确清除缓存。</li><li><strong>简单易用</strong>：通过 <code>require</code> 和 <code>module.exports</code> 实现模块的导入和导出，简单直观。</li></ul><h3 id="_2-1-3-commonjs-的使用示例" tabindex="-1">2.1.3 CommonJS 的使用示例 <a class="header-anchor" href="#_2-1-3-commonjs-的使用示例" aria-label="Permalink to &quot;2.1.3 CommonJS 的使用示例&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// math.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> subtract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  add,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  subtract</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// main.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> math</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./math.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subtract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: 2</span></span></code></pre></div><h3 id="_2-1-4-commonjs-模块查找方式" tabindex="-1">2.1.4 CommonJs 模块查找方式 <a class="header-anchor" href="#_2-1-4-commonjs-模块查找方式" aria-label="Permalink to &quot;2.1.4 CommonJs 模块查找方式&quot;">​</a></h3><p>我们现在已经知道，<strong>require是一个函数</strong>，可以帮助我们引入一个文件（模块）中导出的对象。</p><p>那么，require的查找规则是怎么样的呢？</p><p><a href="https://nodejs.org/dist/latestv14.x/docs/api/modules.html#modules_all_together" target="_blank" rel="noreferrer">https://nodejs.org/dist/latestv14.x/docs/api/modules.html#modules_all_together</a></p><p>首先我们明白：</p><ul><li>CommonJS中是没有module.exports的概念的；</li><li>但是为了实现模块的导出，Node中使用的是Module的类，每一个模块都是Module的一个实例，也就是 module；</li></ul><p>这里我总结比较常见的查找规则：导入格式如下：<code>require(X)</code></p><p><strong>情况一：X是一个Node核心模块</strong></p><p>比如path、http—直接返回核心模块，并且停止查找</p><p><strong>情况二：X是以 ./ 或 …/ 或 /（根目录）开头的</strong></p><ul><li>第一步：将X当做一个文件在对应的目录下查找； <ul><li>1.如果有后缀名，按照后缀名的格式查找对应的文件</li><li>2.如果没有后缀名，会按照如下顺序： <ul><li>1&gt; 直接查找文件X</li><li>2&gt; 查找X.js文件</li><li>3&gt; 查找X.json文件</li><li>4&gt; 查找X.node文件</li></ul></li></ul></li><li>第二步：没有找到对应的文件，将X作为一个目录 <ul><li>查找目录下面的index文件 <ul><li>1&gt; 查找X/index.js文件</li><li>2&gt; 查找X/index.json文件</li><li>3&gt; 查找X/index.node文件</li></ul></li></ul></li><li>如果没有找到，那么报错：not found</li></ul><p><strong>情况三：直接是一个X（没有路径），并且X不是一个核心模块</strong></p><p><img src="`+t+`" alt="img"></p><p>如果上面的路径中都没有找到，那么报错：not found</p><h3 id="_2-1-5-commonjs-可能出现的问题" tabindex="-1">2.1.5 CommonJS 可能出现的问题 <a class="header-anchor" href="#_2-1-5-commonjs-可能出现的问题" aria-label="Permalink to &quot;2.1.5 CommonJS 可能出现的问题&quot;">​</a></h3><p>尽管 <code>CommonJS</code> 在服务端开发中被广泛使用，但在前端环境或大型项目中，它也存在一些潜在的问题和局限性：</p><ul><li><strong>同步加载的限制</strong>：<code>CommonJS </code>模块是同步加载的，这意味着在模块加载完成之前，代码的执行会被阻塞。在服务端环境中（例如 <code>Node.js</code>），这种行为是可行的，因为文件系统读取速度相对较快。然而，在前端浏览器环境中，网络延迟可能导致较长的加载时间，进而阻塞页面渲染并降低用户体验。</li><li><strong>循环依赖问题</strong>：<code>CommonJS</code> 规范中，模块被加载时执行（运行时加载），如果两个模块互相引用（循环依赖），这可能会导致未定义的行为或部分代码无法执行。虽然大多数情况下，<code>Node.js </code>可以处理这种情况，但会引起意料之外的结果，尤其是当模块依赖链较复杂时。</li><li><strong>缺乏静态分析能力</strong>：由于 <code>CommonJS </code>使用动态 <code>require()</code> 语句来引入模块，这使得工具很难在编译时进行静态分析。这种动态依赖关系的管理方式，使得打包工具（如 <code>Webpack、Rollup</code>）难以进行代码优化（如 Tree Shaking），从而影响性能和代码体积。</li><li><strong>跨平台兼容性</strong>：<code>CommonJS </code>规范设计之初是为了满足服务端 JavaScript（Node.js）环境的需求，它不适合直接在浏览器环境中使用。虽然可以通过 Browserify 等工具将 CommonJS 模块转换为浏览器可用的格式，但这增加了开发和构建的复杂性。</li></ul><blockquote><p>尽管 CommonJS 规范在 Node.js 服务端开发中取得了巨大成功，但在前端开发和大型项目中，它也暴露了自身的一些局限性。 现代 JavaScript 开发逐渐转向 ES6 Module 标准，这一标准通过静态分析、异步加载和浏览器原生支持，解决了 CommonJS 规范中的许多问题，为开发者提供了更强大和灵活的模块化支持。</p></blockquote><h2 id="_2-2-amd-规范" tabindex="-1">2.2. AMD 规范 <a class="header-anchor" href="#_2-2-amd-规范" aria-label="Permalink to &quot;2.2. AMD 规范&quot;">​</a></h2><h3 id="_2-2-1-amd-简介" tabindex="-1">2.2.1 AMD 简介 <a class="header-anchor" href="#_2-2-1-amd-简介" aria-label="Permalink to &quot;2.2.1 AMD 简介&quot;">​</a></h3><p><strong>AMD（Asynchronous Module Definition，异步模块定义）是一个在浏览器环境中使用的模块化规范。</strong> 它解决了 CommonJS 在浏览器中同步加载的问题，使用异步加载方式来加载模块。</p><h3 id="_2-2-2-amd-的特性" tabindex="-1">2.2.2 AMD 的特性 <a class="header-anchor" href="#_2-2-2-amd-的特性" aria-label="Permalink to &quot;2.2.2 AMD 的特性&quot;">​</a></h3><ul><li><strong>异步加载</strong>：通过异步方式加载模块，适合在浏览器环境下使用，避免了浏览器渲染的阻塞问题。</li><li><strong>依赖前置</strong>：在定义模块时需要声明所有的依赖模块，这些模块会在代码运行前加载完成。</li><li><strong>较复杂的定义方式</strong>：需要使用 <code>define()</code> 函数来定义模块，并声明依赖。</li></ul><h3 id="_2-2-3-amd-的使用示例" tabindex="-1">2.2.3 AMD 的使用示例 <a class="header-anchor" href="#_2-2-3-amd-的使用示例" aria-label="Permalink to &quot;2.2.3 AMD 的使用示例&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// math.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([], </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> subtract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    add,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    subtract</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// main.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./math&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">math</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subtract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="_2-2-4-amd-可能存在的问题" tabindex="-1">2.2.4 AMD 可能存在的问题 <a class="header-anchor" href="#_2-2-4-amd-可能存在的问题" aria-label="Permalink to &quot;2.2.4 AMD 可能存在的问题&quot;">​</a></h3><p>虽然 AMD 规范在解决浏览器环境中模块异步加载方面有显著的优势，但它也存在一些潜在的问题和局限性：</p><ul><li><strong>模块定义复杂性增加</strong>：AMD 使用 <code>define()</code> 函数来定义模块，并且需要提前声明所有的依赖模块。这种显式声明的方式虽然在一定程度上清晰明了，但在大型项目中会显得繁琐复杂，特别是当依赖关系较多时，代码的可读性和维护性会下降。</li><li><strong>加载速度较慢</strong>：尽管 AMD 通过异步方式加载模块来避免阻塞浏览器渲染进程，但由于模块依赖的前置加载特性，所有依赖模块需要在主模块执行之前全部加载完毕。这在依赖关系复杂或者网络较差的情况下，可能导致模块加载速度变慢，影响页面性能。</li><li><strong>过度依赖回调函数</strong>：AMD 模块化规范依赖于回调函数，这会导致代码结构的嵌套层级增加，出现俗称的“回调地狱”现象，使得代码的调试和维护变得更加困难。</li><li><strong>生态系统和工具支持限制</strong>：相比于 ES6 Module 等更现代的模块化标准，AMD 的生态系统支持较为有限。虽然 RequireJS 等工具对 AMD 提供了良好的支持，但相比于现代工具链（如 Webpack、Rollup 等）对于 ES6 Module 的优化和支持，AMD 的兼容性和性能优化相对较弱。</li></ul><blockquote><p>AMD 规范通过异步加载的方式有效解决了 CommonJS 在浏览器环境下的性能问题，适合用于浏览器端的模块化开发。 然而，其复杂的模块定义方式和对回调的过度依赖，使其在大型项目和现代开发中逐渐失去优势。 随着 ES6 Module 的崛起，开发者们越来越倾向于选择更简单、性能更优的模块化解决方案。</p></blockquote><h2 id="三、现代模块化标准的出现-es6-module" tabindex="-1">三、现代模块化标准的出现：ES6 Module <a class="header-anchor" href="#三、现代模块化标准的出现-es6-module" aria-label="Permalink to &quot;三、现代模块化标准的出现：ES6 Module&quot;">​</a></h2><h3 id="_3-1-es6-module-简介" tabindex="-1">3.1 ES6 Module 简介 <a class="header-anchor" href="#_3-1-es6-module-简介" aria-label="Permalink to &quot;3.1 ES6 Module 简介&quot;">​</a></h3><p><strong>ES6 Module（ESM）是由 ECMAScript 官方在 ES6（ECMAScript 2015）中引入的模块化规范。它是 JavaScript 语言级别的模块系统，支持静态分析，能够在编译时确定模块的依赖关系。</strong></p><p>相较于 CommonJS 和 AMD，ESM 具有更灵活和更高效的模块管理能力。</p><h3 id="_3-2-es6-module-的特性" tabindex="-1">3.2 ES6 Module 的特性 <a class="header-anchor" href="#_3-2-es6-module-的特性" aria-label="Permalink to &quot;3.2 ES6 Module 的特性&quot;">​</a></h3><ol><li><strong>静态依赖分析</strong>： ES6 Module 在编译时就可以确定模块的依赖关系，从而实现静态分析和树摇（Tree Shaking）优化。这意味着模块中没有被使用的代码可以在打包阶段被移除，从而减小最终的文件大小。</li><li><strong>严格模式（Strict Mode）</strong>： ES6 Module 自动采用 JavaScript 严格模式。这意味着模块中不能使用某些不安全的语法（如 <code>with</code> 语句），提高了代码的安全性和性能。</li><li><strong>独立的模块作用域</strong>： 每个模块都有独立的作用域，模块内部的变量、函数不会污染全局作用域，避免了变量命名冲突问题。</li><li><strong>导入和导出语句（Import 和 Export）</strong>： ES6 Module 使用 <code>import</code> 和 <code>export</code> 关键字来导入和导出模块成员。导出可以是命名导出（Named Export）或默认导出（Default Export）。</li><li><strong>异步加载支持</strong>： ES6 Module 可以异步加载模块，避免了阻塞浏览器的渲染进程，从而提升了页面加载性能。</li><li><strong>浏览器原生支持</strong>： 现代浏览器原生支持 ES6 Module，无需额外的加载器（如 RequireJS）或打包工具（如 Webpack）即可直接使用。</li></ol><h3 id="_3-3-es6-module-的使用方法" tabindex="-1">3.3 ES6 Module 的使用方法 <a class="header-anchor" href="#_3-3-es6-module-的使用方法" aria-label="Permalink to &quot;3.3 ES6 Module 的使用方法&quot;">​</a></h3><p>ES6 Module 主要通过 <code>export</code> 和 <code>import</code> 语法来管理模块。</p><h4 id="_3-3-1-导出模块-export" tabindex="-1">3.3.1 导出模块（Export） <a class="header-anchor" href="#_3-3-1-导出模块-export" aria-label="Permalink to &quot;3.3.1 导出模块（Export）&quot;">​</a></h4><p>ES6 Module 提供了两种导出方式：<strong>命名导出</strong> 和 <strong>默认导出</strong>。</p><ul><li><strong>命名导出</strong>（Named Export）：允许导出多个成员，导出时需要使用 <code>{}</code> 包裹。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// module-a.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;moduleA data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> methodA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This is methodA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This is MyClass&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><strong>默认导出</strong>（Default Export）：每个模块只能有一个默认导出，使用 <code>export default</code> 关键字。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// module-b.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This is the default exported function&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="_3-3-2-导入模块-import" tabindex="-1">3.3.2 导入模块（Import） <a class="header-anchor" href="#_3-3-2-导入模块-import" aria-label="Permalink to &quot;3.3.2 导入模块（Import）&quot;">​</a></h4><ul><li><strong>导入命名导出</strong>：需要使用花括号 <code>{}</code> 指定导入的成员。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// main.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { data, methodA, MyClass } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./module-a.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：moduleA data</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">methodA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：This is methodA</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：This is MyClass</span></span></code></pre></div><ul><li><strong>导入默认导出</strong>：直接指定导入的变量名称。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// main.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> defaultFunction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./module-b.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defaultFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：This is the default exported function</span></span></code></pre></div><ul><li><strong>同时导入命名导出和默认导出</strong>：</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// main.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> defaultFunction, { data, methodA } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./module-b.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defaultFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">methodA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h4 id="_3-3-3-动态导入-dynamic-import" tabindex="-1">3.3.3 动态导入（Dynamic Import） <a class="header-anchor" href="#_3-3-3-动态导入-dynamic-import" aria-label="Permalink to &quot;3.3.3 动态导入（Dynamic Import）&quot;">​</a></h4><p>ES6 Module 还支持动态导入模块，这种导入方式适用于需要按需加载的场景。动态导入返回一个 Promise 对象。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// main.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./module-a.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">methodA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：This is methodA</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="_3-4-es6-module-与其他模块规范的比较" tabindex="-1">3.4 ES6 Module 与其他模块规范的比较 <a class="header-anchor" href="#_3-4-es6-module-与其他模块规范的比较" aria-label="Permalink to &quot;3.4 ES6 Module 与其他模块规范的比较&quot;">​</a></h3><p>ES6 Module 相较于 CommonJS 和 AMD 有显著的优势：</p><ol><li><strong>加载方式</strong>： CommonJS 使用同步加载，这在<a href="https://cloud.tencent.com.cn/product/cvm/?from_column=20065&amp;from=20065" target="_blank" rel="noreferrer">服务器</a>端是可行的，但在浏览器中会导致阻塞。而 ES6 Module 支持异步加载，不会阻塞浏览器的渲染进程。</li><li><strong>模块依赖分析</strong>： CommonJS 模块的依赖关系在运行时解析，这可能导致加载时的性能开销。ES6 Module 在编译阶段就能确定依赖关系，优化了加载效率和性能。</li><li><strong>代码优化</strong>： 由于 ES6 Module 支持静态分析工具，构建工具能够对代码进行更有效的优化（如 Tree Shaking），减少最终产物的大小。</li><li><strong>兼容性</strong>： ES6 Module 是现代浏览器和 Node.js 官方推荐和支持的模块化标准，未来的兼容性和更新都更有保障。</li></ol><h3 id="_3-5-es6-module-的局限性" tabindex="-1">3.5 ES6 Module 的局限性 <a class="header-anchor" href="#_3-5-es6-module-的局限性" aria-label="Permalink to &quot;3.5 ES6 Module 的局限性&quot;">​</a></h3><p>虽然 ES6 Module 在现代开发中具有广泛应用，但它也有一些局限性：</p><ol><li><strong>浏览器兼容性</strong>：早期版本的浏览器不支持 ES6 Module，不过随着浏览器的更新，这个问题正逐渐消失。</li><li><strong>服务端使用限制</strong>：在服务端（如 Node.js）环境中，使用 ES6 Module 可能需要一些配置和额外的工具支持（如 Babel、Webpack）。</li><li><strong>性能影响</strong>：在非常大量模块导入的场景下，可能会有性能瓶颈。</li></ol><h3 id="_3-6-es6-模块查找方式" tabindex="-1">3.6 ES6 模块查找方式 <a class="header-anchor" href="#_3-6-es6-模块查找方式" aria-label="Permalink to &quot;3.6 ES6 模块查找方式&quot;">​</a></h3><h4 id="es-module的解析流程" tabindex="-1">ES Module的解析流程 <a class="header-anchor" href="#es-module的解析流程" aria-label="Permalink to &quot;ES Module的解析流程&quot;">​</a></h4><p>ES Module是如何被浏览器解析并且让模块之间可以相互引用的呢？</p><blockquote><p><a href="https://cloud.tencent.com.cn/developer/tools/blog-entry?target=https%3A%2F%2Fhacks.mozilla.org%2F2018%2F03%2Fes-modules-a-cartoon-deep-dive%2F&amp;objectId=2163613&amp;objectType=1&amp;isNewArticle=undefined" target="_blank" rel="noreferrer">ES modules: A cartoon deep-dive</a></p></blockquote><p>ES Module的解析过程可以划分为三个阶段：</p><ul><li>阶段一：构建（Construction），根据地址查找js文件，并且下载，将其解析成模块记录（Module Record）；</li><li>阶段二：实例化（Instantiation），对模块记录进行实例化，并且分配内存空间，解析模块的导入和导出语句，把模块指向对应的内存地址。</li><li>阶段三：运行（Evaluation），运行代码，计算值，并且将值填充到内存地址中</li></ul><p><img src="`+h+'" alt="img"></p><h5 id="阶段一-构建阶段" tabindex="-1">阶段一：构建阶段 <a class="header-anchor" href="#阶段一-构建阶段" aria-label="Permalink to &quot;阶段一：构建阶段&quot;">​</a></h5><p><img src="'+p+'" alt="img"></p><h5 id="阶段二和三-实例化阶段-–-求值阶段" tabindex="-1">阶段二和三：实例化阶段 – 求值阶段 <a class="header-anchor" href="#阶段二和三-实例化阶段-–-求值阶段" aria-label="Permalink to &quot;阶段二和三：实例化阶段 – 求值阶段&quot;">​</a></h5><p><img src="'+e+'" alt="img"></p><h2 id="四、总结" tabindex="-1">四、总结 <a class="header-anchor" href="#四、总结" aria-label="Permalink to &quot;四、总结&quot;">​</a></h2><p>JavaScript 的模块化演进经历了从无到有、从简单到复杂的过程。随着前端应用的复杂性和需求的增加，模块化的重要性愈发凸显。CommonJS、AMD 和 ES6 Module 各有其应用场景和特点。</p><ul><li><strong>CommonJS</strong>：适用于 Node.js 服务端开发，使用同步加载机制。</li><li><strong>AMD</strong>：适用于浏览器环境，使用异步加载机制，解决了前端模块依赖问题。</li><li><strong>ES6 Module</strong>：现代浏览器和 JavaScript 语言级别的模块化标准，支持静态分析、异步加载和 Tree Shaking，是当前前端开发的主流选择。</li></ul><p>未来的 JavaScript 开发中，ES6 Module 将继续发挥重要作用，为开发者提供更强大和灵活的模块化支持。</p>',113)]))}const F=i(k,[["render",r]]);export{u as __pageData,F as default};

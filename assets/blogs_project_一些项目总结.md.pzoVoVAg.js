import{_ as e,c as a,ag as l,o as r}from"./chunks/framework.BcCMgSRd.js";const b=JSON.parse('{"title":"项目总结","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/project/一些项目总结.md","filePath":"blogs/project/一些项目总结.md","lastUpdated":1737013267000}'),i={name:"blogs/project/一些项目总结.md"};function o(n,t,d,s,h,c){return r(),a("div",null,t[0]||(t[0]=[l('<h1 id="项目总结" tabindex="-1">项目总结 <a class="header-anchor" href="#项目总结" aria-label="Permalink to &quot;项目总结&quot;">​</a></h1><p>toB和toC</p><table tabindex="0"><thead><tr><th style="text-align:center;">对比项</th><th style="text-align:center;">过去</th><th style="text-align:center;">现在（微信支付）</th></tr></thead><tbody><tr><td style="text-align:center;">业务形态</td><td style="text-align:center;">toC</td><td style="text-align:center;">toB+toC</td></tr><tr><td style="text-align:center;">前端关注点</td><td style="text-align:center;">性能优化</td><td style="text-align:center;">工程效率、业务价值</td></tr><tr><td style="text-align:center;">开发方式</td><td style="text-align:center;">照单(TAPD)实现</td><td style="text-align:center;">业务分析到建模，系统化思考，论证再实施</td></tr><tr><td style="text-align:center;">成长方式</td><td style="text-align:center;">垂直生长</td><td style="text-align:center;">自驱野蛮生长</td></tr></tbody></table><h2 id="论述方法" tabindex="-1">论述方法 <a class="header-anchor" href="#论述方法" aria-label="Permalink to &quot;论述方法&quot;">​</a></h2><p>论述步骤： 1、why：通过背景、业务痛点来证明事情的必要性 2、how：想法、突破，对比现有和业界，证明事情做的好 3、what：效果成绩证明事情真的做的好</p><h2 id="项目" tabindex="-1">项目 <a class="header-anchor" href="#项目" aria-label="Permalink to &quot;项目&quot;">​</a></h2><h3 id="视频号小任务投放系统搭建" tabindex="-1">视频号小任务投放系统搭建 <a class="header-anchor" href="#视频号小任务投放系统搭建" aria-label="Permalink to &quot;视频号小任务投放系统搭建&quot;">​</a></h3><p>难点：</p><ol><li>数据的字段之间存在依赖。改一个字段的时候会引起其他字段的变化，这些变化逻辑分散在各个函数之间，不易维护，且会给字段的更改函数带来不必要的副作用。并且想知道一个数据的变化源的时候很难定位到具体是有哪个字段引起的。</li><li>之前class的方式复用麻烦，且数据来源不好追溯。需要通过props一层一层往上找。之前很多时候不想因为一个字段就将组件用connect包裹，所以导致追溯麻烦</li><li>数据不好归一化，很多配置项不统一，例如有些人喜欢用label有些人喜欢用name之类的</li><li>创意模版多种多样，例如朋友圈多图单图之类的。之前代码中对于组件是否展示的判断通过一大堆的判断去实现。导致逻辑混乱不易维护</li></ol><p>在原有项目框架的基础上，从0到1搭建小任务系统</p><ol><li>使用hooks进行开发</li><li>封装reducer，将原有使用流程由5步缩短为两步</li><li>基于</li><li>将创意模版由</li></ol><h3 id="互选业务" tabindex="-1">互选业务 <a class="header-anchor" href="#互选业务" aria-label="Permalink to &quot;互选业务&quot;">​</a></h3><ol><li>使用配置化的方式实现表单</li></ol><h3 id="线上系统保障-自驱力" tabindex="-1">线上系统保障 -- 自驱力 <a class="header-anchor" href="#线上系统保障-自驱力" aria-label="Permalink to &quot;线上系统保障  -- 自驱力&quot;">​</a></h3><ol><li>node+mogodb搭建前端bff页面，进行rpc调用和裁剪</li><li>rrweb实现线上屏幕录制 压缩算法优化 / requestIdCallBack优化</li><li>使用playwright编写测试用例，对上线项目进行巡检和上线后</li></ol><h3 id="工程化建设-自驱力" tabindex="-1">工程化建设 -- 自驱力 <a class="header-anchor" href="#工程化建设-自驱力" aria-label="Permalink to &quot;工程化建设 -- 自驱力&quot;">​</a></h3><p>pnpm + workspace实现单体仓库，将多个公共项目用到的数据进行迁移 使用脚手架命令快速创建npm包 通过MR git比较自动发布有改动的包并执行通知</p><h3 id="效率提升" tabindex="-1">效率提升 <a class="header-anchor" href="#效率提升" aria-label="Permalink to &quot;效率提升&quot;">​</a></h3>',18)]))}const x=e(i,[["render",o]]);export{b as __pageData,x as default};

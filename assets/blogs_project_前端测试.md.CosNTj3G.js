import{_ as e,c as l,ag as a,o as d}from"./chunks/framework.CP8Mv0l3.js";const r="/front-knowledge/assets/image-20250102104254989.DWDWS8e-.png",i="/front-knowledge/assets/image-20250102104240174.N-MVPYuV.png",x=JSON.parse('{"title":"前端测试","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/project/前端测试.md","filePath":"blogs/project/前端测试.md","lastUpdated":1735875453000}'),s={name:"blogs/project/前端测试.md"};function n(h,t,o,g,y,f){return d(),l("div",null,t[0]||(t[0]=[a('<h1 id="前端测试" tabindex="-1">前端测试 <a class="header-anchor" href="#前端测试" aria-label="Permalink to &quot;前端测试&quot;">​</a></h1><p>自动化测试是确保前端应用质量、提高开发效率和减少人工测试成本的关键环节。在前端开发中，自动化测试通常包括以下几个层面：</p><h3 id="_1-单元测试" tabindex="-1">1. 单元测试 <a class="header-anchor" href="#_1-单元测试" aria-label="Permalink to &quot;1. 单元测试&quot;">​</a></h3><p>单元测试是测试代码中最小的单元，例如函数或组件。这种测试主要用来确保这些单元能按预期工作。</p><ul><li><strong>工具</strong>：常用的单元测试工具包括 Jest、Mocha、Chai 和 Jasmine。Jest 是目前非常流行的一个选择，因为它集成了断言库和模拟库，且配置简单。</li><li><strong>实践</strong>：在单元测试中，你应该关注如何隔离测试单元，避免外部依赖影响测试结果。使用mocks和spies来模拟外部调用或复杂的逻辑。</li></ul><h3 id="_2-集成测试" tabindex="-1">2. 集成测试 <a class="header-anchor" href="#_2-集成测试" aria-label="Permalink to &quot;2. 集成测试&quot;">​</a></h3><p>集成测试关注的是多个组件或模块如何一起工作。这种测试检查的是组件间的接口是否正常。</p><ul><li><strong>工具</strong>：Jest 和 Mocha 也可以用于集成测试。另外，你可以使用如 Sinon.js 来模拟数据库调用、HTTP请求等。</li><li><strong>实践</strong>：在集成测试中，重要的是确保模块间的交互按预期进行。这通常涉及到数据库操作和网络请求的模拟。</li></ul><h3 id="_3-端到端测试-e2e测试" tabindex="-1">3. 端到端测试（E2E测试） <a class="header-anchor" href="#_3-端到端测试-e2e测试" aria-label="Permalink to &quot;3. 端到端测试（E2E测试）&quot;">​</a></h3><p>端到端测试模拟用户行为以测试整个应用的流程，从用户界面到数据库，再到后端服务，确保所有部分协同工作。</p><ul><li><strong>工具</strong>：常用的E2E测试工具有 Cypress 、 Selenium和Playwright。Playwright 是近年来非常受欢迎的工具，因为它易于设置，执行速度快，且提供了丰富的API和优秀的调试支持。</li><li><strong>实践</strong>：E2E测试应该覆盖用户的主要使用场景，确保应用的关键功能都能正常工作。这些测试通常比较耗时，因此应该选择关键路径进行测试。</li></ul><h3 id="_4-性能测试" tabindex="-1">4. 性能测试 <a class="header-anchor" href="#_4-性能测试" aria-label="Permalink to &quot;4. 性能测试&quot;">​</a></h3><p>性能测试是检查应用在高负载或不同条件下的表现。这对于前端来说，可能涉及到页面加载时间、响应时间等。</p><ul><li><strong>工具</strong>：Lighthouse、WebPageTest 和 Google PageSpeed Insights 是常用的性能测试工具。</li><li><strong>实践</strong>：定期运行性能测试，并与历史数据比较，确保新的代码更改没有引入性能问题。</li></ul><h3 id="_5-可视回归测试" tabindex="-1">5. 可视回归测试 <a class="header-anchor" href="#_5-可视回归测试" aria-label="Permalink to &quot;5. 可视回归测试&quot;">​</a></h3><p>可视回归测试用于确保UI的视觉元素在更改后仍然按预期显示，这对于保持品牌和用户体验的一致性至关重要。</p><ul><li><strong>工具</strong>：Percy、Applitools Eyes等。</li><li><strong>实践</strong>：在UI更改后自动捕捉屏幕快照，并与基线图像进行比较，检测差异。</li></ul><h3 id="自动化测试的最佳实践" tabindex="-1">自动化测试的最佳实践 <a class="header-anchor" href="#自动化测试的最佳实践" aria-label="Permalink to &quot;自动化测试的最佳实践&quot;">​</a></h3><ul><li><strong>持续集成</strong>：将自动化测试集成到CI/CD流程中，确保每次代码提交都自动运行测试。</li><li><strong>测试覆盖率</strong>：监控测试覆盖率，确保重要的代码路径都被测试到。</li><li><strong>测试数据管理</strong>：使用合适的策略管理测试数据，确保测试的一致性和可重复性。</li><li><strong>定期审查和维护测试</strong>：随着应用的发展，定期审查和更新测试用例，确保它们仍然有效和相关。</li></ul><p>通过这些工具和实践，你可以建立一个强大的前端自动化测试框架，帮助你提高代码质量，减少bug，加快开发周期。</p><h2 id="前端代码结构渲染流程" tabindex="-1">前端代码结构渲染流程 <a class="header-anchor" href="#前端代码结构渲染流程" aria-label="Permalink to &quot;前端代码结构渲染流程&quot;">​</a></h2><p>前端项目目前主要以react开发框架为主，下图以react代码进行分析</p><p><img src="'+r+'" alt="image-20250102104254989"></p><p>前端代码主要有三部分：JS 函数、API调用、UI渲染。同时也是需要测试的三部分代码</p><h2 id="前端自动化测试的方式" tabindex="-1">前端自动化测试的方式 <a class="header-anchor" href="#前端自动化测试的方式" aria-label="Permalink to &quot;前端自动化测试的方式&quot;">​</a></h2><p><img src="'+i+'" alt="image-20250102104240174"></p><h3 id="各部分代码与它的自动化测试方式" tabindex="-1">各部分代码与它的自动化测试方式 <a class="header-anchor" href="#各部分代码与它的自动化测试方式" aria-label="Permalink to &quot;各部分代码与它的自动化测试方式&quot;">​</a></h3><ul><li>JS函数： 采用单元测试</li><li>API调用：先 mock API，然后采用单元测试</li><li>UI渲染： 在 JS函数 和 API调用测试正常之后，再采用 UI测试（UI渲染依赖有效的数据）</li></ul><h2 id="自动化测试工具调研" tabindex="-1">自动化测试工具调研 <a class="header-anchor" href="#自动化测试工具调研" aria-label="Permalink to &quot;自动化测试工具调研&quot;">​</a></h2><h3 id="单元测试工具调研" tabindex="-1">单元测试工具调研 <a class="header-anchor" href="#单元测试工具调研" aria-label="Permalink to &quot;单元测试工具调研&quot;">​</a></h3><p>主流单元测试工具比较</p><table tabindex="0"><thead><tr><th style="text-align:left;">工具</th><th style="text-align:left;">断言</th><th style="text-align:left;">仿真</th><th style="text-align:left;">快照</th><th style="text-align:left;">异步测试</th><th style="text-align:left;">稳定性</th><th style="text-align:left;">难度</th></tr></thead><tbody><tr><td style="text-align:left;">Mocha</td><td style="text-align:left;">默认不支持，可配置</td><td style="text-align:left;">默认不支持，可配置</td><td style="text-align:left;">默认不支持，可配置</td><td style="text-align:left;">友好</td><td style="text-align:left;">稳定</td><td style="text-align:left;">中</td></tr><tr><td style="text-align:left;">Ava</td><td style="text-align:left;">默认支持</td><td style="text-align:left;">不支持，需第三方配置</td><td style="text-align:left;">默认支持</td><td style="text-align:left;">友好</td><td style="text-align:left;">不稳定</td><td style="text-align:left;">低</td></tr><tr><td style="text-align:left;">Jasmine</td><td style="text-align:left;">默认支持</td><td style="text-align:left;">默认支持</td><td style="text-align:left;">默认支持</td><td style="text-align:left;">不友好</td><td style="text-align:left;">稳定</td><td style="text-align:left;">中</td></tr><tr><td style="text-align:left;">Jest</td><td style="text-align:left;">默认支持</td><td style="text-align:left;">默认支持</td><td style="text-align:left;">默认支持</td><td style="text-align:left;">友好</td><td style="text-align:left;">稳定</td><td style="text-align:left;">低</td></tr><tr><td style="text-align:left;">Karma</td><td style="text-align:left;">不支持，需第三方配置</td><td style="text-align:left;">不支持，需第三方配置</td><td style="text-align:left;">不支持，需第三方配置</td><td style="text-align:left;">不支持，需第三方配置</td><td style="text-align:left;">稳定</td><td style="text-align:left;">高</td></tr></tbody></table><h4 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h4><p>单元测试使用Jest。</p><p>tips：Jest由Facebook团队维护， 被各种 React 应用推荐和使用，生态稳定，技术友好。</p><h3 id="ui测试工具调研" tabindex="-1">UI测试工具调研 <a class="header-anchor" href="#ui测试工具调研" aria-label="Permalink to &quot;UI测试工具调研&quot;">​</a></h3><p>主流UI工具比较</p><table tabindex="0"><thead><tr><th style="text-align:left;">工具</th><th style="text-align:left;">用例支持语言</th><th style="text-align:left;">等待方式</th><th style="text-align:left;">支持的浏览器</th><th style="text-align:left;">使用复杂度</th><th style="text-align:left;">文档</th><th style="text-align:left;">难度</th><th style="text-align:left;">UI组件测试</th><th style="text-align:left;">浏览器多TAB</th><th style="text-align:left;">近两年流行度</th></tr></thead><tbody><tr><td style="text-align:left;">Selenium</td><td style="text-align:left;">Java、Python、Ruby</td><td style="text-align:left;">阻塞等待</td><td style="text-align:left;">IE、Firefox、Chrome</td><td style="text-align:left;">复杂，需要一堆配置</td><td style="text-align:left;">一般</td><td style="text-align:left;">难</td><td style="text-align:left;">不支持</td><td style="text-align:left;">支持</td><td style="text-align:left;">低</td></tr><tr><td style="text-align:left;">Puppeteer</td><td style="text-align:left;">JavaScript</td><td style="text-align:left;">异步</td><td style="text-align:left;">Chrome、Edge、Electron、Firefox</td><td style="text-align:left;">一般</td><td style="text-align:left;">友好</td><td style="text-align:left;">低</td><td style="text-align:left;">不支持</td><td style="text-align:left;">支持</td><td style="text-align:left;">高</td></tr><tr><td style="text-align:left;">Cypress</td><td style="text-align:left;">JavaScript</td><td style="text-align:left;">异步</td><td style="text-align:left;">Chrome</td><td style="text-align:left;">简单</td><td style="text-align:left;">非常友好</td><td style="text-align:left;">低</td><td style="text-align:left;">支持</td><td style="text-align:left;">不支持</td><td style="text-align:left;">高</td></tr><tr><td style="text-align:left;">Playwright</td><td style="text-align:left;">JavaScript、TypeScript、Java、Python</td><td style="text-align:left;">异步</td><td style="text-align:left;">Chrome、Edge、Electron、Firefox</td><td style="text-align:left;">简单</td><td style="text-align:left;">非常友好</td><td style="text-align:left;">低</td><td style="text-align:left;">支持</td><td style="text-align:left;">支持</td><td style="text-align:left;">高</td></tr></tbody></table><h4 id="结论-1" tabindex="-1">结论 <a class="header-anchor" href="#结论-1" aria-label="Permalink to &quot;结论&quot;">​</a></h4><p>UI测试使用Playwright。</p><p>tips：Playwright有详细的文档说明和视频指导，并且上手难度低。</p><h3 id="api-mock" tabindex="-1">API mock <a class="header-anchor" href="#api-mock" aria-label="Permalink to &quot;API mock&quot;">​</a></h3><p>由前端自己生成，还是后端直接提供？</p><h3 id="引入自动化测试的优缺点" tabindex="-1">引入自动化测试的优缺点 <a class="header-anchor" href="#引入自动化测试的优缺点" aria-label="Permalink to &quot;引入自动化测试的优缺点&quot;">​</a></h3><ul><li>优点：每次迭代都可以进行全局自动化测试，防止小改动引发的未知牵连，确保代码整体稳定。</li><li>缺点：开发或修改需求时，前端开发除了要实现业务需求，还需要写 单元测试代码和UI测试代码，工作量将增大(至少2倍)</li></ul><h2 id="e2e测试" tabindex="-1">e2e测试 <a class="header-anchor" href="#e2e测试" aria-label="Permalink to &quot;e2e测试&quot;">​</a></h2><h3 id="e2e-测试框架选型" tabindex="-1">E2E 测试框架选型 <a class="header-anchor" href="#e2e-测试框架选型" aria-label="Permalink to &quot;E2E 测试框架选型&quot;">​</a></h3><p>目前当前主流的前端 E2E 测试框架主要有：Playwright、Puppeteer、Cypress 和 Selenium，其中 Playwright 是 Puppeteer 进阶版，除了支持更多的编程语言和兼容更多的浏览器之外，还提供了其他更强大的功能。而 Selenium 的运行速度慢，对版本配置要求严苛。现对比<code>Playwright </code>和<code> Cypress</code></p><table tabindex="0"><thead><tr><th>对比项</th><th>PlayWright</th><th>Cypress</th></tr></thead><tbody><tr><td>支持的浏览器</td><td>支持在 Chromium、WebKit 和 Firefox 浏览器以及 Google Chrome 和 Microsoft Edge 等浏览器</td><td>主要支持 Chrome 系列浏览器</td></tr><tr><td>跨平台支持</td><td>支持多平台包括Windows、Mac和Linux</td><td>支持多平台包括Windows、Mac和Linux</td></tr><tr><td>是否能生成测试报告</td><td>支持生成测试报告</td><td>支持</td></tr><tr><td>是否支持并发执行</td><td>支持并发执行，可以加快整体的测试速度</td><td>不支持多个浏览器实例的并发执行</td></tr><tr><td>是否支持多个浏览器TAB</td><td>支持多TAB页测试</td><td>不支持多TAB页面测试</td></tr><tr><td>编写测试脚本的语言</td><td>Playwright使用JavaScript、TypeScript、Java和Python编写测试脚本</td><td>Cypress只支持JavaScript、TypeScript</td></tr><tr><td>辅助生成用例代码</td><td>Playwright支持模拟用户与网站或应用程序的交互过程，包括键盘输入和鼠标点击等，生成用例代码</td><td>Cypress也支持</td></tr><tr><td>调试工具</td><td>自带调试工具</td><td>自带调试工具</td></tr><tr><td>异步处理方式</td><td>Playwright对异步操作提供了很好的支持，它可以等待页面加载、网络请求、定时器等操作完成后再执行后续的测试步骤</td><td>Cypress也支持异步操作，但是在处理某些复杂的异步场景时可能需要特殊的处理。</td></tr><tr><td>CI/CD集成</td><td>可以与常见的CI/CD工具集成</td><td>可以与常见的CI/CD工具进行集成</td></tr><tr><td>是否支持数据模拟</td><td>支持数据模拟，可以模拟网络请求的响应和数据</td><td>支持数据模拟的能力，可以模拟网络请求的响应和数据</td></tr><tr><td>代码覆盖率报告</td><td>Playwright需要使用其他工具来获取代码覆盖率报告</td><td>Cypress提供了内置的代码覆盖率工具，可直接生成</td></tr><tr><td>对前端框架的支持</td><td>支持React、Angular、Vue等流行前端框架的测试</td><td>支持React、Angular、Vue等流行前端框架的测试</td></tr><tr><td>定位元素的方式</td><td>Playwright使用类似于CSS选择器的方式来定位元素</td><td>Cypress则使用了一种独特的方式来定位元素，称为&quot;cy&quot;命令集</td></tr><tr><td>支持移动端测试</td><td>Playwright提供了对移动端浏览器和应用的支持，可以进行移动端测试</td><td>Cypress主要专注于桌面浏览器的测试，不适用于移动端（移动端事件不支持）</td></tr><tr><td>是否支持UI模式</td><td>支持UI模式</td><td>用插件可以实现UI模式</td></tr></tbody></table><h3 id="playwright的优势" tabindex="-1">Playwright的优势 <a class="header-anchor" href="#playwright的优势" aria-label="Permalink to &quot;Playwright的优势&quot;">​</a></h3><ol><li>从浏览器的维度，Playwright 支持更多的浏览器， 而 Cypress 主要支持 chrome 浏览器</li><li>从并发执行维度，Playwright支持并发执行测试用例，可以同时在多个浏览器实例中执行测试，测试速度和效率相对于 Cypress 更加优越。（<a href="https://www.checklyhq.com/blog/puppeteer-vs-selenium-vs-playwright-speed-comparison/" target="_blank" rel="noreferrer">Puppeteer vs Selenium vs Playwright, a speed comparison</a>）</li><li>从多端维度，Playwright提供了对移动端浏览器和应用的支持，可以进行移动端测试，而 Cypress 不支持移动端的测试。</li></ol><h3 id="playwright使用" tabindex="-1">playWright使用 <a class="header-anchor" href="#playwright使用" aria-label="Permalink to &quot;playWright使用&quot;">​</a></h3><ol><li>基本使用：<a href="https://juejin.cn/post/7289740992508215296?searchId=20250102111745D577503C76742933AFE1" target="_blank" rel="noreferrer">https://juejin.cn/post/7289740992508215296?searchId=20250102111745D577503C76742933AFE1</a></li><li>文档：<a href="https://playwright.dev/" target="_blank" rel="noreferrer">https://playwright.dev/</a></li><li>自动录制用例：<a href="https://playwright.dev/docs/codegen" target="_blank" rel="noreferrer">https://playwright.dev/docs/codegen</a></li></ol><h2 id="参考" tabindex="-1">参考： <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考：&quot;">​</a></h2><p><a href="https://juejin.cn/post/7123869512327233550?searchId=20250102105324D85B2D37921FF126F406#heading-39" target="_blank" rel="noreferrer">https://juejin.cn/post/7123869512327233550?searchId=20250102105324D85B2D37921FF126F406#heading-39</a></p>',55)]))}const c=e(s,[["render",n]]);export{x as __pageData,c as default};

import{_ as p}from"./chunks/image-20241119121220179.Dem_yS23.js";import{_ as a,c as o,ag as r,o as t}from"./chunks/framework.CC6fhYpF.js";const s="/front-knowledge/assets/profiling-results.ljUee5if.png",n="/front-knowledge/assets/43f8048aba374c4da4935c3e6b91fcdf~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.BVT8fFZ5.awebp",c="/front-knowledge/assets/6203a905499a41c09d81bb207c8512f4~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.Cb0LD0V3.awebp",i="/front-knowledge/assets/adb88bbc108149c4aae9eba7c5d91c05~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.8USBpBdV.awebp",m="/front-knowledge/assets/image-20241119152853984.DD9lkAXU.png",l="/front-knowledge/assets/image-20241119152948706.DVIQLuoW.png",f="/front-knowledge/assets/b43e85e13beb454ea64bfbc2f166e1e9~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.9Mci5541.awebp",_="/front-knowledge/assets/fcbe336bab2b4b52909646dd6f8747e6~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.BcxRXioi.awebp",b="/front-knowledge/assets/98e4df9c04394642b706ad7f5ab4c03a~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.BikToBT6.awebp",d="/front-knowledge/assets/18ef87c912a7450aaafa6f45e8fdff04~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.DzEBTETT.awebp",g="/front-knowledge/assets/8bb1171ed9254660bbd109f11247287d~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.d2ts3baM.awebp",k="/front-knowledge/assets/a6fcd11ac5294fa3b8f3112866e24728~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.JFfD2tTS.awebp",h="/front-knowledge/assets/3eb80e69e6e646c5936fe75feec8bdd8~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.DVC79JGL.awebp",u="/front-knowledge/assets/4f638039cdf64311bade36a48ec547b0~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.koWO7C61.awebp",w="/front-knowledge/assets/e1ce9b9b11de465a84df9801a3ae89e4~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.BJpoTSXg.awebp",v="/front-knowledge/assets/c26885c1d4ba4cfd857bbd18105eec8c~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.BshwmT4y.awebp",q="/front-knowledge/assets/fbf04df2a7554536a4b1c2d07d82b5e8~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.Dpxpqw3G.awebp",A=JSON.parse('{"title":"performance使用","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/browser/eventLoop/performance使用.md","filePath":"blogs/browser/eventLoop/performance使用.md","lastUpdated":1734576313000}'),z={name:"blogs/browser/eventLoop/performance使用.md"};function L(P,e,T,x,B,E){return t(),o("div",null,e[0]||(e[0]=[r('<h1 id="performance使用" tabindex="-1">performance使用 <a class="header-anchor" href="#performance使用" aria-label="Permalink to &quot;performance使用&quot;">​</a></h1><p>网页加载后，浏览器会解析 html、执行 js、渲染 css，这些工作都是在 Event Loop 里完成的，理解了 Event Loop 就能理解网页的运行流程。但很多人对 Event Loop 的理解只是停留在概念层面，并没看过真实的 Event Loop 是怎样的。其实在 浏览器的Performance 工具里就可以看到。了解了performance的使用，对我们分析问题和优化代码都有非常大的帮助。</p><p>官方文档：<a href="https://developer.chrome.com/docs/devtools/performance/timeline-reference?hl=zh-cn" target="_blank" rel="noreferrer">https://developer.chrome.com/docs/devtools/performance/timeline-reference?hl=zh-cn</a></p><p>翻译：<a href="https://juejin.cn/post/6844903839863144461" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903839863144461</a></p><p>具体的使用可以参考官方文档，我这里只记录自己平时忽略的地方。下图就是我们录制之后的数据。我们一般只用关注<code>Main</code>主线程，也就是执行 Event Loop 的部分。其余的Frames，Thread pool等需要的时候也可以关注下。<img src="'+s+'" alt="性能分析报告页面。"></p><h2 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h2><p><a href="https://claudiopro.github.io/react-fiber-vs-stack-demo/fiber.html" target="_blank" rel="noreferrer">https://claudiopro.github.io/react-fiber-vs-stack-demo/fiber.html</a> 我们可以使用 react 测试 fiber 用的网页。由于用到了时间分片，所以非常适合我们去查看performance</p><h2 id="一些含义" tabindex="-1">一些含义 <a class="header-anchor" href="#一些含义" aria-label="Permalink to &quot;一些含义&quot;">​</a></h2><p>展示的信息中很多种颜色，这些颜色代表着不同的含义：</p><ol><li>灰色就代表宏任务 task，可以看到在react中fiber的构建会在一段一段的宏任务中执行。</li></ol><p><img src="'+n+'" alt="img"></p><ol start="2"><li>蓝色的是 html 的 parse，橙色的是浏览器内部的 JS：</li></ol><p><img src="'+c+'" alt="img"></p><ol start="3"><li>紫色是样式的 reflow、repaint，绿色的部分就是渲染：</li></ol><p><img src="'+i+'" alt="img"></p><p>其余的颜色都是用户 JS 的执行了，那些可以不用区分。</p><h2 id="每一帧" tabindex="-1">每一帧 <a class="header-anchor" href="#每一帧" aria-label="Permalink to &quot;每一帧&quot;">​</a></h2><p><img src="'+m+'" alt="image-20241119152853984"></p><p>我们可以选择某一帧查看这一帧所做的事情。</p><p><img src="'+l+'" alt="image-20241119152948706"></p><p>同时我们也可以看到开启了时间分片之后每一帧都非常的稳定。</p><h2 id="event-loop" tabindex="-1">Event Loop <a class="header-anchor" href="#event-loop" aria-label="Permalink to &quot;Event Loop&quot;">​</a></h2><p>其实上面每一个task就是一个宏任务。</p><p>我们一起来看一下：</p><p>你会发现每隔一段时间就会有一个这种任务：</p><p><img src="'+f+'" alt="img"></p><p>放大一下是这样的：</p><p><img src="'+_+'" alt="img"></p><p>执行了 Animation Frame 的回调，然后执行了回流重绘，最后执行渲染。</p><p>这种任务每隔 16.7 ms 就会执行一次：</p><p><img src="'+b+'" alt="img"></p><p>这就是网页里怎么执行渲染的。</p><p>所以说 requestAnimationFrame 的回调是在渲染前执行的，rAF 和渲染构成了一个宏任务。</p><p>为什么有的时候会掉帧、卡顿，就是因为阻塞的渲染的宏任务的执行：</p><p><img src="'+d+'" alt="img"></p><p>（在 Performance 中宽度代表时间，超过 50ms 就被认为是 Long Task，会被标红）</p><p>我们做性能分析，就是要找到这些 Long Task，然后优化掉它。</p><h3 id="那除了-raf-和渲染-还有哪些是宏任务呢" tabindex="-1">那除了 rAF 和渲染，还有哪些是宏任务呢？ <a class="header-anchor" href="#那除了-raf-和渲染-还有哪些是宏任务呢" aria-label="Permalink to &quot;那除了 rAF 和渲染，还有哪些是宏任务呢？&quot;">​</a></h3><p>看下分析的结果就知道了：</p><p>可以看到 requestIdleCallback 的回调是宏任务：</p><p><img src="'+g+'" alt="img"></p><p>垃圾回收 GC 是宏任务：</p><p><img src="'+k+'" alt="img"></p><p>requestAnimationFrame 的回调是宏任务：</p><p><img src="'+h+'" alt="img"></p><p>html 中直接执行的 script 也是宏任务：</p><p><img src="'+u+'" alt="img"></p><p>这些需要记么？</p><p>不需要，用 Performance 工具看下就知道了。</p><p>那微任务是怎么执行的呢？</p><p><img src="'+w+'" alt="img"></p><p>可以看到 micro task 只是 task 的一部分，宏任务执行完就会执行所有的微任务。</p><p>这就是这个网页的 Event Loop 执行过程。</p><p>当你对这些熟悉了之后，看到下面的火焰图，你就能分析出一些东西来了：</p><p><img src="'+v+'" alt="img"></p><p>中间比较宽的标红的就是 Long Task，是性能优化的主要目标。</p><p>一些比较窄的周期性的 Task 就是 requestAnimationFrame 回调以及 reflow、rapaint 和渲染。</p><p>比较长的那个调用栈一般是递归，而且递归层数特别多。</p><p>当你展开看的时候，它也能展示完整的代码运行流程：</p><p><img src="'+q+'" alt="img"></p><p>而如果你打断点调试，只能看到其中的一个调用栈，这是用 Performance 工具分析代码流程比 debugger 断点调试更好的地方。</p><p>当你阅读源码的时候，也可以通过 Performance 看执行流程的全貌，然后再 debugger 某些具体的流程。</p><h2 id="总结成一张图" tabindex="-1">总结成一张图 <a class="header-anchor" href="#总结成一张图" aria-label="Permalink to &quot;总结成一张图&quot;">​</a></h2><p><img src="'+p+'" alt="image-20241119121220179"></p><p>理解了这个对于我们后面分析问题非常有帮助。</p>',65)]))}const S=a(z,[["render",L]]);export{A as __pageData,S as default};

import{_ as e,c as t,ag as o,o as r}from"./chunks/framework.CC6fhYpF.js";const i="/front-knowledge/assets/image-20241217165935092.6P0_hXNV.png",m=JSON.parse('{"title":"前端部署","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/structure/前端部署.md","filePath":"blogs/structure/前端部署.md","lastUpdated":1734576313000}'),l={name:"blogs/structure/前端部署.md"};function s(n,a,c,d,p,h){return r(),t("div",null,a[0]||(a[0]=[o('<h1 id="前端部署" tabindex="-1">前端部署 <a class="header-anchor" href="#前端部署" aria-label="Permalink to &quot;前端部署&quot;">​</a></h1><p><img src="'+i+'" alt="image-20241217165935092"></p><ol><li>MR合并触发流水线执行。</li><li>流水线可以进行相应的任务编排。例如代码构建，打包。</li><li>将CSS JS等静态文件上传至CDN</li><li>将HTML文件打包成镜像。镜像内使用Nginx镜像静态文件代理。</li><li>将镜像推送到服务器并运行镜像。这时候就会启动Nginx成功代理。</li></ol><h3 id="如何实现不同环境的部署" tabindex="-1">如何实现不同环境的部署 <a class="header-anchor" href="#如何实现不同环境的部署" aria-label="Permalink to &quot;如何实现不同环境的部署&quot;">​</a></h3><p>不同环境使用不同的流水线。也不是同一个镜像仓库。运行的时候通过判断是不是<code>master</code>分支或者<code>git tag</code>上带上对应的关键字从而判断不同的环境</p><p>不同环境的配置，例如CDN，Nginx等等可以放置在不同的目录下面。执行的时候通过路径获取</p><p>不同环境可以监听不同的分支或者<code>gti tag</code></p><h3 id="如何实现版本管理" tabindex="-1">如何实现版本管理 <a class="header-anchor" href="#如何实现版本管理" aria-label="Permalink to &quot;如何实现版本管理&quot;">​</a></h3><p>每次执行构建不同的镜像。发布的时候选择其中一个镜像发布即可。可以执行对应的灰度策略等等。因为打包了多个镜像，所以实现版本的回退之类的会非常方便。</p>',9)]))}const u=e(l,[["render",s]]);export{m as __pageData,u as default};

import{_ as i,c as a,ag as n,o as e}from"./chunks/framework.CP8Mv0l3.js";const l="/front-knowledge/assets/image-20250103103947627.DVVIjbNl.png",t="/front-knowledge/assets/image-20250103103404461.t4jMNL3c.png",g=JSON.parse('{"title":"依赖预构建","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/project/vite/依赖预构建.md","filePath":"blogs/project/vite/依赖预构建.md","lastUpdated":1735875453000}'),p={name:"blogs/project/vite/依赖预构建.md"};function h(k,s,r,d,o,E){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="依赖预构建" tabindex="-1">依赖预构建 <a class="header-anchor" href="#依赖预构建" aria-label="Permalink to &quot;依赖预构建&quot;">​</a></h1><h2 id="为什么要预构建" tabindex="-1">为什么要预构建 <a class="header-anchor" href="#为什么要预构建" aria-label="Permalink to &quot;为什么要预构建&quot;">​</a></h2><ol><li><p><strong>CommonJS 和 UMD 兼容性：</strong> 在开发阶段中，Vite 的开发服务器将所有代码视为原生 ES 模块。因此，Vite 必须先将以 CommonJS 或 UMD 形式提供的依赖项转换为 ES 模块。</p><p>在转换 CommonJS 依赖项时，Vite 会进行智能导入分析，这样即使模块的导出是动态分配的（例如 React），具名导入（named imports）也能正常工作：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 符合预期</span></span>
<span class="line"><span>import React, { useState } from &#39;react&#39;</span></span></code></pre></div></li><li><p><strong>性能：</strong> 为了提高后续页面的加载性能，Vite 将那些具有许多内部模块的 ESM 依赖项转换为单个模块。</p><p>有些包将它们的 ES 模块构建为许多单独的文件，彼此导入。例如，<a href="https://unpkg.com/browse/lodash-es/" target="_blank" rel="noreferrer"><code>lodash-es</code> 有超过 600 个内置模块</a>！当我们执行 <code>import { debounce } from &#39;lodash-es&#39;</code> 时，浏览器同时发出 600 多个 HTTP 请求！即使服务器能够轻松处理它们，但大量请求会导致浏览器端的网络拥塞，使页面加载变得明显缓慢。</p><p>通过将 <code>lodash-es</code> 预构建成单个模块，现在我们只需要一个HTTP请求！</p></li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>注意 依赖预构建仅适用于开发模式，并使用 <code>esbuild</code> 将依赖项转换为 ES 模块。在生产构建中，将使用 <code>@rollup/plugin-commonjs</code>。 :::</p><h2 id="预构建产物" tabindex="-1">预构建产物 <a class="header-anchor" href="#预构建产物" aria-label="Permalink to &quot;预构建产物&quot;">​</a></h2><ol><li>遍历所有的文件，搜集所有裸模块的请求，然后将所有裸模块的请求作为esbuild打包的入口文件，将所有裸模块缓存打包到<code>.vite/deps</code>文件夹下，在打包过程中，会将<code>commonjs</code>转化为<code>esmodule</code>的形式，本质是使用一个<code>export default</code>包裹着<code>commonjs</code>的代码，同时利用esbuild的打包能力，将多个内置请求合并为一个请求，防止大量请求引起浏览器端的网络堵塞，使页面加载变得非常缓慢</li><li>在浏览器请求链接时改写所有裸模块的路径指向<code>.vite/deps</code></li><li>如果想要重新执行预构建，使用<code>--force</code>参数或者直接删除<code>node_modeuls/.vite/deps</code>是比较快捷的方式，或者改变一些配置的值可以触发重新预构建</li></ol><h2 id="预构建的特性" tabindex="-1">预构建的特性 <a class="header-anchor" href="#预构建的特性" aria-label="Permalink to &quot;预构建的特性&quot;">​</a></h2><h3 id="源码和依赖" tabindex="-1">源码和依赖 <a class="header-anchor" href="#源码和依赖" aria-label="Permalink to &quot;源码和依赖&quot;">​</a></h3><p>冷启动开发服务器时，基于打包器的方式启动必须优先抓取并构建你的整个应用，然后才能提供服务。</p><p>Vite 通过在一开始将应用中的模块区分为 <strong>依赖</strong> 和 <strong>源码</strong> 两类，改进了开发服务器启动时间。</p><ul><li><p><strong>依赖</strong> 大多为在开发时不会变动的纯 JavaScript。一些较大的依赖（例如有上百个模块的组件库）处理的代价也很高。依赖也通常会存在多种模块化格式（例如 ESM 或者 CommonJS）。</p><p>Vite 将会使用 <a href="https://esbuild.github.io/" target="_blank" rel="noreferrer">esbuild</a> <a href="https://cn.vite.dev/guide/dep-pre-bundling.html" target="_blank" rel="noreferrer">预构建依赖</a>。esbuild 使用 Go 编写，并且比以 JavaScript 编写的打包器预构建依赖快 10-100 倍。</p></li><li><p><strong>源码</strong> 通常包含一些并非直接是 JavaScript 的文件，需要转换（例如 JSX，CSS 或者 Vue/Svelte 组件），时常会被编辑。同时，并不是所有的源码都需要同时被加载（例如基于路由拆分的代码模块）。</p><p>Vite 以 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules" target="_blank" rel="noreferrer">原生 ESM</a> 方式提供源码。这实际上是让浏览器接管了打包程序的部分工作：Vite 只需要在浏览器请求源码时进行转换并按需提供源码。根据情景动态导入代码，即只在当前屏幕上实际使用时才会被处理。</p></li></ul><p><code>vite</code>只会预构依赖。对于源码也需要预构建的，需要我们手动处理。例如在一个 monorepo 启动中，该仓库中的某个包可能会成为另一个包的依赖。Vite 会自动侦测没有从 <code>node_modules</code> 解析的依赖项，并将链接的依赖视为源码。它不会尝试打包被链接的依赖，而是会分析被链接依赖的依赖列表。那么你可以在配置里将此依赖添加到 <a href="https://cn.vite.dev/config/dep-optimization-options.html#optimizedeps-include" target="_blank" rel="noreferrer"><code>optimizeDeps.include</code></a> 和 <a href="https://cn.vite.dev/config/build-options.html#build-commonjsoptions" target="_blank" rel="noreferrer"><code>build.commonjsOptions.include</code></a> 这两项中。</p><h3 id="缓存-提高启动和响应速度" tabindex="-1">缓存（提高启动和响应速度） <a class="header-anchor" href="#缓存-提高启动和响应速度" aria-label="Permalink to &quot;缓存（提高启动和响应速度）&quot;">​</a></h3><h4 id="文件系统缓存" tabindex="-1">文件系统缓存 <a class="header-anchor" href="#文件系统缓存" aria-label="Permalink to &quot;文件系统缓存&quot;">​</a></h4><p>Vite 将预构建的依赖项缓存到 <code>node_modules/.vite</code> 中。它会基于以下几个来源来决定是否需要重新运行预构建步骤：</p><ul><li>包管理器的锁文件内容，例如 <code>package-lock.json</code>，<code>yarn.lock</code>，<code>pnpm-lock.yaml</code>，或者 <code>bun.lockb</code>；</li><li>补丁文件夹的修改时间；</li><li><code>vite.config.js</code> 中的相关字段；</li><li><code>NODE_ENV</code> 的值。</li></ul><p>只有在上述其中一项发生更改时，才需要重新运行预构建。</p><p>如果出于某些原因你想要强制 Vite 重新构建依赖项，你可以在启动开发服务器时指定 <code>--force</code> 选项，或手动删除 <code>node_modules/.vite</code> 缓存目录。</p><h4 id="浏览器缓存" tabindex="-1">浏览器缓存 <a class="header-anchor" href="#浏览器缓存" aria-label="Permalink to &quot;浏览器缓存&quot;">​</a></h4><p>已预构建的依赖请求使用 HTTP 头 <code>max-age=31536000, immutable</code> 进行强缓存，以提高开发期间页面重新加载的性能。一旦被缓存，这些请求将永远不会再次访问开发服务器。如果安装了不同版本的依赖项（这反映在包管理器的 lockfile 中），则会通过附加版本查询自动失效。如果你想通过本地编辑来调试依赖项，可以通过如下方式：</p><ol><li>通过浏览器开发工具的 Network 选项卡暂时禁用缓存；</li><li>重启 Vite 开发服务器指定 <code>--force</code> 选项，来重新构建依赖项;</li><li>重新载入页面。</li></ol><p>源码位于<code>packages/vite/src/node/server/middlewares/transform.ts</code>下的<code>transformMiddleware</code>函数</p><p><img src="`+l+'" alt="image-20250103103947627"></p><h2 id="整体流程" tabindex="-1">整体流程 <a class="header-anchor" href="#整体流程" aria-label="Permalink to &quot;整体流程&quot;">​</a></h2><p>主要分为两步</p><ol><li>通过<code>html</code>文件分析所有的第三方依赖</li><li>打包所有的第三方依赖。后续请求拦截的时候对返回结果进行判断，如果是第三方依赖就从预购建的结果里面取。</li></ol><p><img src="'+t+`" alt="image-20250103103404461"></p><ol><li><p>通过<code>prepareEsbuildScanner</code>找到所有项目依赖的第三方模块入口</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> esbuild.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    absWorkingDir: process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cwd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    write: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 只分析，不写入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stdin: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      contents: entries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`import \${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      loader: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bundle: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    format: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;esm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    logLevel: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;silent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    plugins: [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plugins, plugin],</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">esbuildOptions,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tsconfigRaw,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span></code></pre></div><p>esbuild.context 和 esbuild.build 差不多的功能。</p></li><li><p>调用<code>esbuild</code>将得到的入口作为打包的入口</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> esbuild.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 调用esbuild打包一下，实现预购建</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    absWorkingDir: process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cwd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    entryPoints: Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flatIdDeps), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 入口文件。先通过vite插件找到所有第三方模块的入口文件，然后通过入口文件进行打包。因为esbuild不支持从html扫面依赖</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bundle: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // We can&#39;t use platform &#39;neutral&#39;, as esbuild has custom handling</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // when the platform is &#39;node&#39; or &#39;browser&#39; that can&#39;t be emulated</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // by using mainFields and conditions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    platform,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    define,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    format: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;esm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打成esm</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // See https://github.com/evanw/esbuild/issues/1921#issuecomment-1152991694</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    banner:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      platform </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            js: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`import { createRequire } from &#39;module&#39;;const require = createRequire(import.meta.url);\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    target: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ESBUILD_MODULES_TARGET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    external,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    logLevel: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    splitting: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sourcemap: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    outdir: processingCacheDir, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出目录就是.vite</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ignoreAnnotations: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    metafile: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    plugins,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    charset: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">esbuildOptions,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    supported: {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">defaultEsbuildSupported,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">esbuildOptions.supported,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span></code></pre></div></li></ol></div>`,4)]))}const y=i(p,[["render",h]]);export{g as __pageData,y as default};

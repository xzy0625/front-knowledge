import{_ as t,c as r,o as a,at as l}from"./chunks/framework.BvgWjPB6.js";const o="/front-knowledge/assets/image-20241230150619226.CfSsEadd.png",i="/front-knowledge/assets/image-20241230150630624.C-2SCzES.png",b=JSON.parse('{"title":"为什么选 Vite","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/project/vite/vite优势.md","filePath":"blogs/project/vite/vite优势.md","lastUpdated":1738931418000}'),p={name:"blogs/project/vite/vite优势.md"};function n(s,e,d,h,c,u){return a(),r("div",null,e[0]||(e[0]=[l('<h1 id="为什么选-vite" tabindex="-1">为什么选 Vite <a class="header-anchor" href="#为什么选-vite" aria-label="Permalink to &quot;为什么选 Vite&quot;">​</a></h1><p>链接：<a href="https://cn.vite.dev/guide/why.html#slow-updates" target="_blank" rel="noreferrer">https://cn.vite.dev/guide/why.html#slow-updates</a></p><h2 id="现实问题" tabindex="-1">现实问题 <a class="header-anchor" href="#现实问题" aria-label="Permalink to &quot;现实问题&quot;">​</a></h2><p>在浏览器支持 ES 模块之前，JavaScript 并没有提供原生机制让开发者以模块化的方式进行开发。这也正是我们对 “打包” 这个概念熟悉的原因：使用工具抓取、处理并将我们的源码模块串联成可以在浏览器中运行的文件。</p><p>时过境迁，我们见证了诸如 <a href="https://webpack.js.org/" target="_blank" rel="noreferrer">webpack</a>、<a href="https://rollupjs.org/" target="_blank" rel="noreferrer">Rollup</a> 和 <a href="https://parceljs.org/" target="_blank" rel="noreferrer">Parcel</a> 等工具的变迁，它们极大地改善了前端开发者的开发体验。</p><p>然而，当我们开始构建越来越大型的应用时，需要处理的 JavaScript 代码量也呈指数级增长。包含数千个模块的大型项目相当普遍。基于 JavaScript 开发的工具就会开始遇到性能瓶颈：通常需要很长时间（甚至是几分钟！）才能启动开发服务器，即使使用模块热替换（HMR），文件修改后的效果也需要几秒钟才能在浏览器中反映出来。如此循环往复，迟钝的反馈会极大地影响开发者的开发效率和幸福感。</p><p>Vite 旨在利用生态系统中的新进展解决上述问题：浏览器开始原生支持 ES 模块，且越来越多 JavaScript 工具使用编译型语言编写。</p><h3 id="缓慢的服务器启动" tabindex="-1">缓慢的服务器启动 <a class="header-anchor" href="#缓慢的服务器启动" aria-label="Permalink to &quot;缓慢的服务器启动&quot;">​</a></h3><p>当冷启动开发服务器时，基于打包器的方式启动必须优先抓取并构建你的整个应用，然后才能提供服务。</p><p>Vite 通过在一开始将应用中的模块区分为 <strong>依赖</strong> 和 <strong>源码</strong> 两类，改进了开发服务器启动时间。</p><ul><li><p><strong>依赖</strong> 大多为在开发时不会变动的纯 JavaScript。一些较大的依赖（例如有上百个模块的组件库）处理的代价也很高。依赖也通常会存在多种模块化格式（例如 ESM 或者 CommonJS）。</p><p>Vite 将会使用 <a href="https://esbuild.github.io/" target="_blank" rel="noreferrer">esbuild</a> <a href="https://cn.vite.dev/guide/dep-pre-bundling.html" target="_blank" rel="noreferrer">预构建依赖</a>。esbuild 使用 Go 编写，并且比以 JavaScript 编写的打包器预构建依赖快 10-100 倍。</p></li><li><p><strong>源码</strong> 通常包含一些并非直接是 JavaScript 的文件，需要转换（例如 JSX，CSS 或者 Vue/Svelte 组件），时常会被编辑。同时，并不是所有的源码都需要同时被加载（例如基于路由拆分的代码模块）。</p><p>Vite 以 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules" target="_blank" rel="noreferrer">原生 ESM</a> 方式提供源码。这实际上是让浏览器接管了打包程序的部分工作：Vite 只需要在浏览器请求源码时进行转换并按需提供源码。根据情景动态导入代码，即只在当前屏幕上实际使用时才会被处理。</p></li></ul><img src="'+o+'" alt="image-20241230150619226" style="zoom:50%;"><img src="'+i+'" alt="image-20241230150630624" style="zoom:50%;"><h3 id="缓慢的更新" tabindex="-1">缓慢的更新 <a class="header-anchor" href="#缓慢的更新" aria-label="Permalink to &quot;缓慢的更新&quot;">​</a></h3><p>基于打包启动时，当源文件被修改后，重新构建整个包是低效的，原因显而易见：更新速度会随着应用体积的增加而线性下降。</p><p>一些打包器的开发服务器将构建内容存入内存，这样它们只需要在文件更改时使模块图的一部分失活[<a href="https://cn.vite.dev/guide/why.html#footnote-1" target="_blank" rel="noreferrer">1]</a>，但它也仍需要整个重新构建并重载页面。这样代价很高，并且重新加载页面会消除应用的当前状态，所以打包器支持了动态模块热替换（HMR）：允许一个模块 “热替换” 它自己，而不会影响页面其余部分。这大大改进了开发体验 —— 然而，在实践中我们发现，即使采用了 HMR 模式，其热更新速度也会随着应用规模的增长而显著下降。</p><p>在 Vite 中，HMR 是在原生 ESM 上执行的。当编辑一个文件时，Vite 只需要精确地使已编辑的模块与其最近的 HMR 边界之间的链失活[<a href="https://cn.vite.dev/guide/why.html#footnote-1" target="_blank" rel="noreferrer">1]</a>（大多数时候只是模块本身），使得无论应用大小如何，HMR 始终能保持快速更新。</p><p>Vite 同时利用 HTTP 头来加速整个页面的重新加载（再次让浏览器为我们做更多事情）：源码模块的请求会根据 <code>304 Not Modified</code> 进行协商缓存，而依赖模块请求则会通过 <code>Cache-Control: max-age=31536000,immutable</code> 进行强缓存，因此一旦被缓存它们将不需要再次请求。</p><p>一旦你体验到 Vite 的神速，你可能再也不想回到曾经的打包开发方式了。</p><h2 id="为什么生产环境仍需打包" tabindex="-1">为什么生产环境仍需打包 <a class="header-anchor" href="#为什么生产环境仍需打包" aria-label="Permalink to &quot;为什么生产环境仍需打包&quot;">​</a></h2><p>尽管原生 ESM 现在得到了广泛支持，但由于嵌套导入会导致额外的网络往返，在生产环境中发布未打包的 ESM 仍然效率低下（即使使用 HTTP/2）。为了在生产环境中获得最佳的加载性能，最好还是将代码进行 tree-shaking、懒加载和 chunk 分割（以获得更好的缓存）。</p><p>要确保开发服务器和生产环境构建之间的最优输出和行为一致并不容易。所以 Vite 附带了一套 <a href="https://cn.vite.dev/guide/features.html#build-optimizations" target="_blank" rel="noreferrer">构建优化</a> 的 <a href="https://cn.vite.dev/guide/build.html" target="_blank" rel="noreferrer">构建命令</a>，开箱即用。</p><h3 id="为何不用-esbuild-打包" tabindex="-1">为何不用 ESBuild 打包？ <a class="header-anchor" href="#为何不用-esbuild-打包" aria-label="Permalink to &quot;为何不用 ESBuild 打包？&quot;">​</a></h3><p>虽然 Vite 利用 esbuild <a href="https://cn.vite.dev/guide/dep-pre-bundling.html" target="_blank" rel="noreferrer">在开发中预打包一些依赖</a>，但 Vite 不会在生产构建中使用 esbuild 作为打包工具。</p><p>Vite 目前的插件 API 与使用 <code>esbuild</code> 作为打包器并不兼容。尽管 <code>esbuild</code> 速度更快，但 Vite 采用了 Rollup 灵活的插件 API 和基础建设，这对 Vite 在生态中的成功起到了重要作用。目前来看，我们认为 Rollup 提供了更好的性能与灵活性方面的权衡。</p><p>Rollup 已经开始着手改进性能，<a href="https://github.com/rollup/rollup/pull/5073" target="_blank" rel="noreferrer">在 v4 中将其解析器切换到 SWC</a>。同时还有一个正在进行中的工作，即构建一个名为 Rolldown 的 Rust 版本的 Rollup。一旦 Rolldown 准备就绪，它就可以在 Vite 中取代 Rollup 和 esbuild，显著提高构建性能，并消除开发和构建之间的不一致性。</p>',26)]))}const f=t(p,[["render",n]]);export{b as __pageData,f as default};

import{_ as i,c as e,ag as a,o as t}from"./chunks/framework.CC6fhYpF.js";const r="/front-knowledge/assets/image-20241211143807817.D28pDZ_o.png",_=JSON.parse('{"title":"插件式实战","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/structure/监控系统插件式开发实战.md","filePath":"blogs/structure/监控系统插件式开发实战.md","lastUpdated":1734576313000}'),o={name:"blogs/structure/监控系统插件式开发实战.md"};function s(n,l,c,d,u,h){return t(),e("div",null,l[0]||(l[0]=[a('<h1 id="插件式实战" tabindex="-1">插件式实战 <a class="header-anchor" href="#插件式实战" aria-label="Permalink to &quot;插件式实战&quot;">​</a></h1><h2 id="总体思想" tabindex="-1">总体思想 <a class="header-anchor" href="#总体思想" aria-label="Permalink to &quot;总体思想&quot;">​</a></h2><ol><li>我们的核心是收集数据，所以插件中的核心是收集数据。另外有些自定义的事件，所以插件也可以用来扩展事件核心</li></ol><h2 id="整体框架" tabindex="-1">整体框架 <a class="header-anchor" href="#整体框架" aria-label="Permalink to &quot;整体框架&quot;">​</a></h2><p><img src="'+r+'" alt="image-20241211143807817"></p><p>数据收集部分：</p><h2 id="设计指导思想" tabindex="-1">设计指导思想 <a class="header-anchor" href="#设计指导思想" aria-label="Permalink to &quot;设计指导思想&quot;">​</a></h2><ol><li>插件式设计</li><li>观察者模式</li></ol><h2 id="具体实现" tabindex="-1">具体实现 <a class="header-anchor" href="#具体实现" aria-label="Permalink to &quot;具体实现&quot;">​</a></h2><ol><li>core <ul><li>实现一个EventEmitter，触发事件，插件可以进行监听并处理</li><li>支持初始化参数（应用id, uid之类的）</li><li>初始化常见错误的上报，并注册相关插件（需保证插件名称唯一）</li><li>支持导出相关生命周期，支持在plugins中监听</li><li>支持自定义上报，可以被插件中调用</li></ul></li><li>plugin API <ul><li>插件名称：上报时候的key使用插件名称</li><li>初始化的时候传入单独的options配置</li><li>collect：收集数据</li><li>triggerEvent: string [], 触发数据收集的事件，这些事件core中内置</li><li>可以在实例上注册自定义事件，并携带collect数据和插件。【上报时类型默认为CUSTOM_EVENTS】</li><li>支持监听生命周期去执行相关事情</li></ul></li><li>plugins <ul><li>performance 性能监控</li><li>record 录制数据</li><li>user beHaviors 用户行为录制</li><li>whiteScreen 白屏数据</li></ul></li></ol><h2 id="优势" tabindex="-1">优势 <a class="header-anchor" href="#优势" aria-label="Permalink to &quot;优势&quot;">​</a></h2><ol><li>插件式开发</li><li>参考sentry的 发布-订阅 模式</li><li>参考 vue / react 实现了全局错误捕获并在全局进行捕获</li><li>参考 vue 实现了数据访问委托</li><li>参考 vue 的插件实现 实现注入全局属性，ts使用模块化的方式</li></ol><h2 id="一些记录" tabindex="-1">一些记录 <a class="header-anchor" href="#一些记录" aria-label="Permalink to &quot;一些记录&quot;">​</a></h2><ol><li>如何保证上报请求不被取消 <a href="https://blog.csdn.net/qq_28565961/article/details/125449937" target="_blank" rel="noreferrer">https://blog.csdn.net/qq_28565961/article/details/125449937</a> fetch keep-alive或者Navigator.sendBeacon()</li><li>如何节约性能(数据量上 / 事件处理上) <ul><li>把耗时操作放到requestIdleCallback中处理</li><li>事件防抖，数据压缩在webworker，抽样上报</li></ul></li><li>如何保证安全性 <ul><li>用户代码用trycatch进行包裹</li></ul></li></ol>',14)]))}const b=i(o,[["render",s]]);export{_ as __pageData,b as default};

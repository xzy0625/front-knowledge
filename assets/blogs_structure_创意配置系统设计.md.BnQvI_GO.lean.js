import{_ as s,c as a,ag as e,o as l}from"./chunks/framework.CC6fhYpF.js";const t="/front-knowledge/assets/image-20241217154402637.CNiBjods.png",u=JSON.parse('{"title":"创意配置系统设计","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/structure/创意配置系统设计.md","filePath":"blogs/structure/创意配置系统设计.md","lastUpdated":1734581696000}'),r={name:"blogs/structure/创意配置系统设计.md"};function o(n,i,h,p,d,c){return l(),a("div",null,i[0]||(i[0]=[e('<h1 id="创意配置系统设计" tabindex="-1">创意配置系统设计 <a class="header-anchor" href="#创意配置系统设计" aria-label="Permalink to &quot;创意配置系统设计&quot;">​</a></h1><h2 id="整个项目的设计" tabindex="-1">整个项目的设计 <a class="header-anchor" href="#整个项目的设计" aria-label="Permalink to &quot;整个项目的设计&quot;">​</a></h2><p>之前的痛点：</p><ol><li>没区分逻辑组件和纯UI组件，封装意识不够 / 历史迭代结果。导致很容易出现庞大的组件，逻辑十分混乱 <ul><li>区分UI组件和逻辑组件。UI组件不处理任何业务逻辑，切保证单一职责。</li><li>逻辑组件可以有特定的业务逻辑，但是业务逻辑尽可能通过hook封装后使用</li></ul></li><li>数据管理负责，定义一个新数据步骤繁琐 <ul><li>简化数据流程，通过统一的reducer生成函数，同时通过封装同一个hook进行更改。</li></ul></li><li>定向数据和其他配置数据数据频繁操作和更改 <ul><li>增加一个函数，支持数组和对象，返回一个统一的对象。对象上自带相关的数据操作函数。使数据拥有自处理能力。且所有数据都这样使用，规范切方便维护</li></ul></li><li>创意组件配置麻烦。因为业务上有各种各样的创意形式。多图 / 单图 / 视频等。通过将</li></ol><p>目前的总体设计：</p><p><img src="'+t+`" alt="image-20241217154402637"></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">service(store更改，一般是一个action函数</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> store(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">定义数据</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">业务组件(逻辑组件</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> store / service</span></span></code></pre></div><h2 id="创意系统设计" tabindex="-1">创意系统设计 <a class="header-anchor" href="#创意系统设计" aria-label="Permalink to &quot;创意系统设计&quot;">​</a></h2><ol><li>每个创意类型对应一个ID。这个ID对应提交的ID。</li><li>每个配置包括组件配置 / 提交创意配置 / 描述 / id枚举等。重点在于组件配置</li><li>组件配置里面的每一项可以有 是否需要展示 / 需要提交的key / 错误处理函数 / 配置等等。后面进行统一的收集 <ul><li>错误处理函数：通过传入<code>creative</code>字段和广告主基本信息等，具体实现由各个配置实现</li></ul></li><li>最后通过组件配置获取到所有需要提交的数据。然后再统一整理获取的数据，例如要把某些字段整合到一个提交字段中（在<code>redux</code>中为了方便，可能会把一个复合字段平铺开来，方便使用。）。这一步可以叫做<code>reduxToApiState</code>。</li></ol>`,9)]))}const g=s(r,[["render",o]]);export{u as __pageData,g as default};
